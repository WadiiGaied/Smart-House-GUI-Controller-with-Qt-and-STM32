
Smart_House.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004960  08004960  00014960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004980  08004980  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004980  08004980  00014980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004988  08004988  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004988  08004988  00014988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800498c  0800498c  0001498c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000016c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000017c  2000017c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000cf74  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c7d  00000000  00000000  0002cff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c68  00000000  00000000  0002ec78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009c3  00000000  00000000  0002f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000201ed  00000000  00000000  000302a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e02c  00000000  00000000  00050490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c7282  00000000  00000000  0005e4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003488  00000000  00000000  00125740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00128bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004948 	.word	0x08004948

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004948 	.word	0x08004948

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fdc4 	bl	8001054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f852 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f9bc 	bl	800084c <MX_GPIO_Init>
  MX_DMA_Init();
 80004d4:	f000 f99a 	bl	800080c <MX_DMA_Init>
  MX_TIM6_Init();
 80004d8:	f000 f938 	bl	800074c <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80004dc:	f000 f96c 	bl	80007b8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80004e0:	f000 f8b2 	bl	8000648 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80004e4:	2201      	movs	r2, #1
 80004e6:	2140      	movs	r1, #64	; 0x40
 80004e8:	4819      	ldr	r0, [pc, #100]	; (8000550 <main+0x8c>)
 80004ea:	f001 fd11 	bl	8001f10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2180      	movs	r1, #128	; 0x80
 80004f2:	4817      	ldr	r0, [pc, #92]	; (8000550 <main+0x8c>)
 80004f4:	f001 fd0c 	bl	8001f10 <HAL_GPIO_WritePin>
  if(HAL_TIM_PWM_Start_DMA(&htim1,TIM_CHANNEL_1,(uint32_t *) &PwmData,SET)!= HAL_OK)
 80004f8:	2301      	movs	r3, #1
 80004fa:	4a16      	ldr	r2, [pc, #88]	; (8000554 <main+0x90>)
 80004fc:	2100      	movs	r1, #0
 80004fe:	4816      	ldr	r0, [pc, #88]	; (8000558 <main+0x94>)
 8000500:	f002 fac0 	bl	8002a84 <HAL_TIM_PWM_Start_DMA>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <main+0x4a>
  {

	  Error_Handler();
 800050a:	f000 fbfb 	bl	8000d04 <Error_Handler>
  }
  if(HAL_TIM_Base_Start(&htim6)!=HAL_OK)
 800050e:	4813      	ldr	r0, [pc, #76]	; (800055c <main+0x98>)
 8000510:	f002 fa00 	bl	8002914 <HAL_TIM_Base_Start>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <main+0x5a>
  {
   	Error_Handler();
 800051a:	f000 fbf3 	bl	8000d04 <Error_Handler>
  }
  if (HAL_UART_Receive_IT(&huart2, &QtRxData, sizeof(QtRxData))!= HAL_OK)
 800051e:	2201      	movs	r2, #1
 8000520:	490f      	ldr	r1, [pc, #60]	; (8000560 <main+0x9c>)
 8000522:	4810      	ldr	r0, [pc, #64]	; (8000564 <main+0xa0>)
 8000524:	f003 fa4b 	bl	80039be <HAL_UART_Receive_IT>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <main+0x6e>
  {
	  Error_Handler();
 800052e:	f000 fbe9 	bl	8000d04 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Dht11_Fct();
 8000532:	f000 fba5 	bl	8000c80 <Dht11_Fct>
	  QtTxData[0] = Temperature;
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <main+0xa4>)
 8000538:	781a      	ldrb	r2, [r3, #0]
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <main+0xa8>)
 800053c:	701a      	strb	r2, [r3, #0]
	  QtTxData[1] = Humidity ;
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <main+0xac>)
 8000540:	781a      	ldrb	r2, [r3, #0]
 8000542:	4b0a      	ldr	r3, [pc, #40]	; (800056c <main+0xa8>)
 8000544:	705a      	strb	r2, [r3, #1]
	  Send_Data_Uart(QtTxData, sizeof(QtTxData));
 8000546:	2104      	movs	r1, #4
 8000548:	4808      	ldr	r0, [pc, #32]	; (800056c <main+0xa8>)
 800054a:	f000 fa17 	bl	800097c <Send_Data_Uart>
	  Dht11_Fct();
 800054e:	e7f0      	b.n	8000532 <main+0x6e>
 8000550:	40020400 	.word	0x40020400
 8000554:	20000174 	.word	0x20000174
 8000558:	2000002c 	.word	0x2000002c
 800055c:	20000074 	.word	0x20000074
 8000560:	20000169 	.word	0x20000169
 8000564:	2000011c 	.word	0x2000011c
 8000568:	20000166 	.word	0x20000166
 800056c:	2000016c 	.word	0x2000016c
 8000570:	20000167 	.word	0x20000167

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2230      	movs	r2, #48	; 0x30
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f004 f9b4 	bl	80048f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	4b28      	ldr	r3, [pc, #160]	; (8000640 <SystemClock_Config+0xcc>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	4a27      	ldr	r2, [pc, #156]	; (8000640 <SystemClock_Config+0xcc>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	; 0x40
 80005a8:	4b25      	ldr	r3, [pc, #148]	; (8000640 <SystemClock_Config+0xcc>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b22      	ldr	r3, [pc, #136]	; (8000644 <SystemClock_Config+0xd0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a21      	ldr	r2, [pc, #132]	; (8000644 <SystemClock_Config+0xd0>)
 80005be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <SystemClock_Config+0xd0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d0:	2301      	movs	r3, #1
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e4:	2304      	movs	r3, #4
 80005e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005e8:	2332      	movs	r3, #50	; 0x32
 80005ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f0:	2307      	movs	r3, #7
 80005f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 0320 	add.w	r3, r7, #32
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 fca3 	bl	8001f44 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000604:	f000 fb7e 	bl	8000d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060c:	2302      	movs	r3, #2
 800060e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000618:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800061a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2101      	movs	r1, #1
 8000626:	4618      	mov	r0, r3
 8000628:	f001 ff04 	bl	8002434 <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000632:	f000 fb67 	bl	8000d04 <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3750      	adds	r7, #80	; 0x50
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b092      	sub	sp, #72	; 0x48
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
 8000668:	615a      	str	r2, [r3, #20]
 800066a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2220      	movs	r2, #32
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f004 f93c 	bl	80048f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000678:	4b32      	ldr	r3, [pc, #200]	; (8000744 <MX_TIM1_Init+0xfc>)
 800067a:	4a33      	ldr	r2, [pc, #204]	; (8000748 <MX_TIM1_Init+0x100>)
 800067c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 800067e:	4b31      	ldr	r3, [pc, #196]	; (8000744 <MX_TIM1_Init+0xfc>)
 8000680:	2231      	movs	r2, #49	; 0x31
 8000682:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000684:	4b2f      	ldr	r3, [pc, #188]	; (8000744 <MX_TIM1_Init+0xfc>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10;
 800068a:	4b2e      	ldr	r3, [pc, #184]	; (8000744 <MX_TIM1_Init+0xfc>)
 800068c:	220a      	movs	r2, #10
 800068e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000690:	4b2c      	ldr	r3, [pc, #176]	; (8000744 <MX_TIM1_Init+0xfc>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000696:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <MX_TIM1_Init+0xfc>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069c:	4b29      	ldr	r3, [pc, #164]	; (8000744 <MX_TIM1_Init+0xfc>)
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006a2:	4828      	ldr	r0, [pc, #160]	; (8000744 <MX_TIM1_Init+0xfc>)
 80006a4:	f002 f99e 	bl	80029e4 <HAL_TIM_PWM_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80006ae:	f000 fb29 	bl	8000d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b2:	2300      	movs	r3, #0
 80006b4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006be:	4619      	mov	r1, r3
 80006c0:	4820      	ldr	r0, [pc, #128]	; (8000744 <MX_TIM1_Init+0xfc>)
 80006c2:	f002 ffcf 	bl	8003664 <HAL_TIMEx_MasterConfigSynchronization>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80006cc:	f000 fb1a 	bl	8000d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006d0:	2360      	movs	r3, #96	; 0x60
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006d8:	2300      	movs	r3, #0
 80006da:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006dc:	2300      	movs	r3, #0
 80006de:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006e4:	2300      	movs	r3, #0
 80006e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f0:	2200      	movs	r2, #0
 80006f2:	4619      	mov	r1, r3
 80006f4:	4813      	ldr	r0, [pc, #76]	; (8000744 <MX_TIM1_Init+0xfc>)
 80006f6:	f002 fb8d 	bl	8002e14 <HAL_TIM_PWM_ConfigChannel>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000700:	f000 fb00 	bl	8000d04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000718:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800071c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800071e:	2300      	movs	r3, #0
 8000720:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	4619      	mov	r1, r3
 8000726:	4807      	ldr	r0, [pc, #28]	; (8000744 <MX_TIM1_Init+0xfc>)
 8000728:	f003 f818 	bl	800375c <HAL_TIMEx_ConfigBreakDeadTime>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000732:	f000 fae7 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000736:	4803      	ldr	r0, [pc, #12]	; (8000744 <MX_TIM1_Init+0xfc>)
 8000738:	f000 fb88 	bl	8000e4c <HAL_TIM_MspPostInit>

}
 800073c:	bf00      	nop
 800073e:	3748      	adds	r7, #72	; 0x48
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	2000002c 	.word	0x2000002c
 8000748:	40010000 	.word	0x40010000

0800074c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_TIM6_Init+0x64>)
 800075c:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <MX_TIM6_Init+0x68>)
 800075e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_TIM6_Init+0x64>)
 8000762:	2231      	movs	r2, #49	; 0x31
 8000764:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_TIM6_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_TIM6_Init+0x64>)
 800076e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000772:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_TIM6_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800077a:	480d      	ldr	r0, [pc, #52]	; (80007b0 <MX_TIM6_Init+0x64>)
 800077c:	f002 f87a 	bl	8002874 <HAL_TIM_Base_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000786:	f000 fabd 	bl	8000d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000792:	463b      	mov	r3, r7
 8000794:	4619      	mov	r1, r3
 8000796:	4806      	ldr	r0, [pc, #24]	; (80007b0 <MX_TIM6_Init+0x64>)
 8000798:	f002 ff64 	bl	8003664 <HAL_TIMEx_MasterConfigSynchronization>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80007a2:	f000 faaf 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000074 	.word	0x20000074
 80007b4:	40001000 	.word	0x40001000

080007b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007be:	4a12      	ldr	r2, [pc, #72]	; (8000808 <MX_USART2_UART_Init+0x50>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007f0:	f003 f806 	bl	8003800 <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007fa:	f000 fa83 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	2000011c 	.word	0x2000011c
 8000808:	40004400 	.word	0x40004400

0800080c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_DMA_Init+0x3c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a0b      	ldr	r2, [pc, #44]	; (8000848 <MX_DMA_Init+0x3c>)
 800081c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_DMA_Init+0x3c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	2039      	movs	r0, #57	; 0x39
 8000834:	f000 fd7f 	bl	8001336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000838:	2039      	movs	r0, #57	; 0x39
 800083a:	f000 fd98 	bl	800136e <HAL_NVIC_EnableIRQ>

}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b41      	ldr	r3, [pc, #260]	; (800096c <MX_GPIO_Init+0x120>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a40      	ldr	r2, [pc, #256]	; (800096c <MX_GPIO_Init+0x120>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b3e      	ldr	r3, [pc, #248]	; (800096c <MX_GPIO_Init+0x120>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b3a      	ldr	r3, [pc, #232]	; (800096c <MX_GPIO_Init+0x120>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a39      	ldr	r2, [pc, #228]	; (800096c <MX_GPIO_Init+0x120>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b37      	ldr	r3, [pc, #220]	; (800096c <MX_GPIO_Init+0x120>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b33      	ldr	r3, [pc, #204]	; (800096c <MX_GPIO_Init+0x120>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a32      	ldr	r2, [pc, #200]	; (800096c <MX_GPIO_Init+0x120>)
 80008a4:	f043 0310 	orr.w	r3, r3, #16
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b30      	ldr	r3, [pc, #192]	; (800096c <MX_GPIO_Init+0x120>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0310 	and.w	r3, r3, #16
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b2c      	ldr	r3, [pc, #176]	; (800096c <MX_GPIO_Init+0x120>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a2b      	ldr	r2, [pc, #172]	; (800096c <MX_GPIO_Init+0x120>)
 80008c0:	f043 0308 	orr.w	r3, r3, #8
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b29      	ldr	r3, [pc, #164]	; (800096c <MX_GPIO_Init+0x120>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0308 	and.w	r3, r3, #8
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b25      	ldr	r3, [pc, #148]	; (800096c <MX_GPIO_Init+0x120>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a24      	ldr	r2, [pc, #144]	; (800096c <MX_GPIO_Init+0x120>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b22      	ldr	r3, [pc, #136]	; (800096c <MX_GPIO_Init+0x120>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2102      	movs	r1, #2
 80008f2:	481f      	ldr	r0, [pc, #124]	; (8000970 <MX_GPIO_Init+0x124>)
 80008f4:	f001 fb0c 	bl	8001f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GREEN_Pin|ORANGE_Pin|RED_Pin
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 4174 	mov.w	r1, #62464	; 0xf400
 80008fe:	481d      	ldr	r0, [pc, #116]	; (8000974 <MX_GPIO_Init+0x128>)
 8000900:	f001 fb06 	bl	8001f10 <HAL_GPIO_WritePin>
                          |BLUE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	21c0      	movs	r1, #192	; 0xc0
 8000908:	481b      	ldr	r0, [pc, #108]	; (8000978 <MX_GPIO_Init+0x12c>)
 800090a:	f001 fb01 	bl	8001f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800090e:	2302      	movs	r3, #2
 8000910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	4812      	ldr	r0, [pc, #72]	; (8000970 <MX_GPIO_Init+0x124>)
 8000926:	f001 f93f 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 GREEN_Pin ORANGE_Pin RED_Pin
                           BLUE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GREEN_Pin|ORANGE_Pin|RED_Pin
 800092a:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 800092e:	617b      	str	r3, [r7, #20]
                          |BLUE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4619      	mov	r1, r3
 8000942:	480c      	ldr	r0, [pc, #48]	; (8000974 <MX_GPIO_Init+0x128>)
 8000944:	f001 f930 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000948:	23c0      	movs	r3, #192	; 0xc0
 800094a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	4806      	ldr	r0, [pc, #24]	; (8000978 <MX_GPIO_Init+0x12c>)
 8000960:	f001 f922 	bl	8001ba8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	; 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800
 8000970:	40020000 	.word	0x40020000
 8000974:	40020c00 	.word	0x40020c00
 8000978:	40020400 	.word	0x40020400

0800097c <Send_Data_Uart>:

/* USER CODE BEGIN 4 */
static void Send_Data_Uart(uint8_t *data, uint8_t size)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	70fb      	strb	r3, [r7, #3]
	   HAL_UART_Transmit(&huart2,  data, size, HAL_MAX_DELAY);
 8000988:	78fb      	ldrb	r3, [r7, #3]
 800098a:	b29a      	uxth	r2, r3
 800098c:	f04f 33ff 	mov.w	r3, #4294967295
 8000990:	6879      	ldr	r1, [r7, #4]
 8000992:	4803      	ldr	r0, [pc, #12]	; (80009a0 <Send_Data_Uart+0x24>)
 8000994:	f002 ff81 	bl	800389a <HAL_UART_Transmit>
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	2000011c 	.word	0x2000011c

080009a4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a2f      	ldr	r2, [pc, #188]	; (8000a70 <HAL_UART_RxCpltCallback+0xcc>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d157      	bne.n	8000a66 <HAL_UART_RxCpltCallback+0xc2>
	  {
		 if ( HAL_UART_Receive_IT(&huart2, &QtRxData, sizeof(QtRxData)) != HAL_OK )
 80009b6:	2201      	movs	r2, #1
 80009b8:	492e      	ldr	r1, [pc, #184]	; (8000a74 <HAL_UART_RxCpltCallback+0xd0>)
 80009ba:	482f      	ldr	r0, [pc, #188]	; (8000a78 <HAL_UART_RxCpltCallback+0xd4>)
 80009bc:	f002 ffff 	bl	80039be <HAL_UART_Receive_IT>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <HAL_UART_RxCpltCallback+0x26>
		 {
			 Error_Handler();
 80009c6:	f000 f99d 	bl	8000d04 <Error_Handler>
		 }

		 if( QtRxData == 'O' )
 80009ca:	4b2a      	ldr	r3, [pc, #168]	; (8000a74 <HAL_UART_RxCpltCallback+0xd0>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b4f      	cmp	r3, #79	; 0x4f
 80009d0:	d109      	bne.n	80009e6 <HAL_UART_RxCpltCallback+0x42>
			 {

			 HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10 , GPIO_PIN_SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d8:	4828      	ldr	r0, [pc, #160]	; (8000a7c <HAL_UART_RxCpltCallback+0xd8>)
 80009da:	f001 fa99 	bl	8001f10 <HAL_GPIO_WritePin>
			 QtTxData[2] =  SET ;
 80009de:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <HAL_UART_RxCpltCallback+0xdc>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	709a      	strb	r2, [r3, #2]
	    	 }
	    	 QtTxData[3] = Intensity ;
	    	 PwmData = Intensity ;
	     }
	  }
}
 80009e4:	e03f      	b.n	8000a66 <HAL_UART_RxCpltCallback+0xc2>
	     else if( QtRxData == 'F' )
 80009e6:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <HAL_UART_RxCpltCallback+0xd0>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b46      	cmp	r3, #70	; 0x46
 80009ec:	d109      	bne.n	8000a02 <HAL_UART_RxCpltCallback+0x5e>
		     HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10 , GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f4:	4821      	ldr	r0, [pc, #132]	; (8000a7c <HAL_UART_RxCpltCallback+0xd8>)
 80009f6:	f001 fa8b 	bl	8001f10 <HAL_GPIO_WritePin>
			 QtTxData[2] = RESET  ;
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <HAL_UART_RxCpltCallback+0xdc>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	709a      	strb	r2, [r3, #2]
}
 8000a00:	e031      	b.n	8000a66 <HAL_UART_RxCpltCallback+0xc2>
	     else if ( QtRxData == 'P' )
 8000a02:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <HAL_UART_RxCpltCallback+0xd0>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b50      	cmp	r3, #80	; 0x50
 8000a08:	d118      	bne.n	8000a3c <HAL_UART_RxCpltCallback+0x98>
	    	 Intensity += Pas;
 8000a0a:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <HAL_UART_RxCpltCallback+0xe0>)
 8000a0c:	781a      	ldrb	r2, [r3, #0]
 8000a0e:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <HAL_UART_RxCpltCallback+0xe4>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <HAL_UART_RxCpltCallback+0xe0>)
 8000a18:	701a      	strb	r2, [r3, #0]
	    	 if (Intensity > MAX_INTENSITY)
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <HAL_UART_RxCpltCallback+0xe0>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b0a      	cmp	r3, #10
 8000a20:	d902      	bls.n	8000a28 <HAL_UART_RxCpltCallback+0x84>
	    	 Intensity = MAX_INTENSITY;
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <HAL_UART_RxCpltCallback+0xe0>)
 8000a24:	220a      	movs	r2, #10
 8000a26:	701a      	strb	r2, [r3, #0]
	    	 QtTxData[3] = Intensity ;
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <HAL_UART_RxCpltCallback+0xe0>)
 8000a2a:	781a      	ldrb	r2, [r3, #0]
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <HAL_UART_RxCpltCallback+0xdc>)
 8000a2e:	70da      	strb	r2, [r3, #3]
	    	 PwmData = Intensity ;
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <HAL_UART_RxCpltCallback+0xe0>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_UART_RxCpltCallback+0xe8>)
 8000a38:	601a      	str	r2, [r3, #0]
}
 8000a3a:	e014      	b.n	8000a66 <HAL_UART_RxCpltCallback+0xc2>
	     else if ( QtRxData == 'M' )
 8000a3c:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <HAL_UART_RxCpltCallback+0xd0>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b4d      	cmp	r3, #77	; 0x4d
 8000a42:	d110      	bne.n	8000a66 <HAL_UART_RxCpltCallback+0xc2>
	    	 Intensity -= Pas;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <HAL_UART_RxCpltCallback+0xe0>)
 8000a46:	781a      	ldrb	r2, [r3, #0]
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_UART_RxCpltCallback+0xe4>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <HAL_UART_RxCpltCallback+0xe0>)
 8000a52:	701a      	strb	r2, [r3, #0]
	    	 QtTxData[3] = Intensity ;
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <HAL_UART_RxCpltCallback+0xe0>)
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_UART_RxCpltCallback+0xdc>)
 8000a5a:	70da      	strb	r2, [r3, #3]
	    	 PwmData = Intensity ;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_UART_RxCpltCallback+0xe0>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <HAL_UART_RxCpltCallback+0xe8>)
 8000a64:	601a      	str	r2, [r3, #0]
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40004400 	.word	0x40004400
 8000a74:	20000169 	.word	0x20000169
 8000a78:	2000011c 	.word	0x2000011c
 8000a7c:	40020c00 	.word	0x40020c00
 8000a80:	2000016c 	.word	0x2000016c
 8000a84:	20000170 	.word	0x20000170
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	20000174 	.word	0x20000174

08000a90 <Micro_Delay>:
static void Micro_Delay(uint16_t time){
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]
	  __HAL_TIM_SET_COUNTER(&htim6, RESET);
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <Micro_Delay+0x30>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
	  while (__HAL_TIM_GET_COUNTER(&htim6) < time);
 8000aa2:	bf00      	nop
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <Micro_Delay+0x30>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000aaa:	88fb      	ldrh	r3, [r7, #6]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d3f9      	bcc.n	8000aa4 <Micro_Delay+0x14>
}
 8000ab0:	bf00      	nop
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000074 	.word	0x20000074

08000ac4 <Set_Pin_Output>:
static void Set_Pin_Output(GPIO_TypeDef *GPIOx,uint16_t GPIO_Pin)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	460b      	mov	r3, r1
 8000ace:	807b      	strh	r3, [r7, #2]
GPIO_InitTypeDef GPIO_InitStruct = {GPIO_PIN_RESET};
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
GPIO_InitStruct.Pin = GPIO_Pin;
 8000ae0:	887b      	ldrh	r3, [r7, #2]
 8000ae2:	60fb      	str	r3, [r7, #12]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]
HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	4619      	mov	r1, r3
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f001 f856 	bl	8001ba8 <HAL_GPIO_Init>
}
 8000afc:	bf00      	nop
 8000afe:	3720      	adds	r7, #32
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <Set_Pin_Input>:

static void Set_Pin_Input(GPIO_TypeDef *GPIOx,uint16_t GPIO_Pin)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	807b      	strh	r3, [r7, #2]
GPIO_InitTypeDef GPIO_InitStruct = {GPIO_PIN_RESET};
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
GPIO_InitStruct.Pin = GPIO_Pin;
 8000b20:	887b      	ldrh	r3, [r7, #2]
 8000b22:	60fb      	str	r3, [r7, #12]
GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61bb      	str	r3, [r7, #24]
HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	4619      	mov	r1, r3
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f001 f836 	bl	8001ba8 <HAL_GPIO_Init>
}
 8000b3c:	bf00      	nop
 8000b3e:	3720      	adds	r7, #32
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <Dht11_Start>:
static void Dht11_Start (void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	Set_Pin_Output(  DHT11_GPIO_Port, DHT11_Pin );
 8000b48:	2102      	movs	r1, #2
 8000b4a:	4811      	ldr	r0, [pc, #68]	; (8000b90 <Dht11_Start+0x4c>)
 8000b4c:	f7ff ffba 	bl	8000ac4 <Set_Pin_Output>
	HAL_GPIO_WritePin( DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET );   // pull the pin high
 8000b50:	2201      	movs	r2, #1
 8000b52:	2102      	movs	r1, #2
 8000b54:	480e      	ldr	r0, [pc, #56]	; (8000b90 <Dht11_Start+0x4c>)
 8000b56:	f001 f9db 	bl	8001f10 <HAL_GPIO_WritePin>
	HAL_Delay(DELAY_1S);
 8000b5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b5e:	f000 faeb 	bl	8001138 <HAL_Delay>
	HAL_GPIO_WritePin( DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET );   // pull the pin low
 8000b62:	2200      	movs	r2, #0
 8000b64:	2102      	movs	r1, #2
 8000b66:	480a      	ldr	r0, [pc, #40]	; (8000b90 <Dht11_Start+0x4c>)
 8000b68:	f001 f9d2 	bl	8001f10 <HAL_GPIO_WritePin>
	Micro_Delay(DELAY_18MS);
 8000b6c:	f244 6050 	movw	r0, #18000	; 0x4650
 8000b70:	f7ff ff8e 	bl	8000a90 <Micro_Delay>
	HAL_GPIO_WritePin( DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET );   // pull the pin high
 8000b74:	2201      	movs	r2, #1
 8000b76:	2102      	movs	r1, #2
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <Dht11_Start+0x4c>)
 8000b7a:	f001 f9c9 	bl	8001f10 <HAL_GPIO_WritePin>
	Micro_Delay(DELAY_20US);
 8000b7e:	2014      	movs	r0, #20
 8000b80:	f7ff ff86 	bl	8000a90 <Micro_Delay>
	Set_Pin_Input( DHT11_GPIO_Port, DHT11_Pin );
 8000b84:	2102      	movs	r1, #2
 8000b86:	4802      	ldr	r0, [pc, #8]	; (8000b90 <Dht11_Start+0x4c>)
 8000b88:	f7ff ffbc 	bl	8000b04 <Set_Pin_Input>
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40020000 	.word	0x40020000

08000b94 <Check_Response>:


static uint8_t Check_Response (void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
	uint8_t Response = RESET ;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	71fb      	strb	r3, [r7, #7]
	Micro_Delay(DELAY_40US);
 8000b9e:	2028      	movs	r0, #40	; 0x28
 8000ba0:	f7ff ff76 	bl	8000a90 <Micro_Delay>
	if (!(HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)))
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	4811      	ldr	r0, [pc, #68]	; (8000bec <Check_Response+0x58>)
 8000ba8:	f001 f99a 	bl	8001ee0 <HAL_GPIO_ReadPin>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d10e      	bne.n	8000bd0 <Check_Response+0x3c>
	{
	 Micro_Delay(DELAY_80US);
 8000bb2:	2050      	movs	r0, #80	; 0x50
 8000bb4:	f7ff ff6c 	bl	8000a90 <Micro_Delay>
		if ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)))
 8000bb8:	2102      	movs	r1, #2
 8000bba:	480c      	ldr	r0, [pc, #48]	; (8000bec <Check_Response+0x58>)
 8000bbc:	f001 f990 	bl	8001ee0 <HAL_GPIO_ReadPin>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d002      	beq.n	8000bcc <Check_Response+0x38>
		{
			Response = SET;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	71fb      	strb	r3, [r7, #7]
 8000bca:	e001      	b.n	8000bd0 <Check_Response+0x3c>
		}
		else
	    {
			Response = -1;
 8000bcc:	23ff      	movs	r3, #255	; 0xff
 8000bce:	71fb      	strb	r3, [r7, #7]
	    }
	}
	while ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)));   // wait for the pin to go low
 8000bd0:	bf00      	nop
 8000bd2:	2102      	movs	r1, #2
 8000bd4:	4805      	ldr	r0, [pc, #20]	; (8000bec <Check_Response+0x58>)
 8000bd6:	f001 f983 	bl	8001ee0 <HAL_GPIO_ReadPin>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d1f8      	bne.n	8000bd2 <Check_Response+0x3e>

	return Response;
 8000be0:	79fb      	ldrb	r3, [r7, #7]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40020000 	.word	0x40020000

08000bf0 <Dht11_Read>:

static uint8_t Dht11_Read (void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	71bb      	strb	r3, [r7, #6]
 8000bfa:	e037      	b.n	8000c6c <Dht11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)));   // wait for the pin to go high
 8000bfc:	bf00      	nop
 8000bfe:	2102      	movs	r1, #2
 8000c00:	481e      	ldr	r0, [pc, #120]	; (8000c7c <Dht11_Read+0x8c>)
 8000c02:	f001 f96d 	bl	8001ee0 <HAL_GPIO_ReadPin>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d0f8      	beq.n	8000bfe <Dht11_Read+0xe>
		Micro_Delay(DELAY_40US);   // wait for 40 us
 8000c0c:	2028      	movs	r0, #40	; 0x28
 8000c0e:	f7ff ff3f 	bl	8000a90 <Micro_Delay>
		if (!(HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)))   // if the pin is low
 8000c12:	2102      	movs	r1, #2
 8000c14:	4819      	ldr	r0, [pc, #100]	; (8000c7c <Dht11_Read+0x8c>)
 8000c16:	f001 f963 	bl	8001ee0 <HAL_GPIO_ReadPin>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d10e      	bne.n	8000c3e <Dht11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000c20:	79bb      	ldrb	r3, [r7, #6]
 8000c22:	f1c3 0307 	rsb	r3, r3, #7
 8000c26:	2201      	movs	r2, #1
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	b25b      	sxtb	r3, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	b25a      	sxtb	r2, r3
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	4013      	ands	r3, r2
 8000c38:	b25b      	sxtb	r3, r3
 8000c3a:	71fb      	strb	r3, [r7, #7]
 8000c3c:	e00b      	b.n	8000c56 <Dht11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000c3e:	79bb      	ldrb	r3, [r7, #6]
 8000c40:	f1c3 0307 	rsb	r3, r3, #7
 8000c44:	2201      	movs	r2, #1
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	b25a      	sxtb	r2, r3
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	b25b      	sxtb	r3, r3
 8000c54:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)));  // wait for the pin to go low
 8000c56:	bf00      	nop
 8000c58:	2102      	movs	r1, #2
 8000c5a:	4808      	ldr	r0, [pc, #32]	; (8000c7c <Dht11_Read+0x8c>)
 8000c5c:	f001 f940 	bl	8001ee0 <HAL_GPIO_ReadPin>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d1f8      	bne.n	8000c58 <Dht11_Read+0x68>
	for (j=0;j<8;j++)
 8000c66:	79bb      	ldrb	r3, [r7, #6]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	71bb      	strb	r3, [r7, #6]
 8000c6c:	79bb      	ldrb	r3, [r7, #6]
 8000c6e:	2b07      	cmp	r3, #7
 8000c70:	d9c4      	bls.n	8000bfc <Dht11_Read+0xc>
	}
	return i;
 8000c72:	79fb      	ldrb	r3, [r7, #7]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40020000 	.word	0x40020000

08000c80 <Dht11_Fct>:
static void Dht11_Fct(void)
 {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	  Dht11_Start();
 8000c84:	f7ff ff5e 	bl	8000b44 <Dht11_Start>
	  Presence   = Check_Response();
 8000c88:	f7ff ff84 	bl	8000b94 <Check_Response>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <Dht11_Fct+0x64>)
 8000c92:	701a      	strb	r2, [r3, #0]
	  HumByte1  =  Dht11_Read();
 8000c94:	f7ff ffac 	bl	8000bf0 <Dht11_Read>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <Dht11_Fct+0x68>)
 8000c9e:	701a      	strb	r2, [r3, #0]
	  HumByte2  =  Dht11_Read();
 8000ca0:	f7ff ffa6 	bl	8000bf0 <Dht11_Read>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <Dht11_Fct+0x6c>)
 8000caa:	701a      	strb	r2, [r3, #0]
	  TempByte1 =  Dht11_Read();
 8000cac:	f7ff ffa0 	bl	8000bf0 <Dht11_Read>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <Dht11_Fct+0x70>)
 8000cb6:	701a      	strb	r2, [r3, #0]
	  TempByte2 =  Dht11_Read();
 8000cb8:	f7ff ff9a 	bl	8000bf0 <Dht11_Read>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <Dht11_Fct+0x74>)
 8000cc2:	701a      	strb	r2, [r3, #0]
	  Sum        =  Dht11_Read();
 8000cc4:	f7ff ff94 	bl	8000bf0 <Dht11_Read>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <Dht11_Fct+0x78>)
 8000cce:	801a      	strh	r2, [r3, #0]
	  Temperature = TempByte1;
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <Dht11_Fct+0x70>)
 8000cd2:	781a      	ldrb	r2, [r3, #0]
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <Dht11_Fct+0x7c>)
 8000cd6:	701a      	strb	r2, [r3, #0]
	  Humidity    =  HumByte1 ;
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <Dht11_Fct+0x68>)
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <Dht11_Fct+0x80>)
 8000cde:	701a      	strb	r2, [r3, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000168 	.word	0x20000168
 8000ce8:	20000162 	.word	0x20000162
 8000cec:	20000163 	.word	0x20000163
 8000cf0:	20000160 	.word	0x20000160
 8000cf4:	20000161 	.word	0x20000161
 8000cf8:	20000164 	.word	0x20000164
 8000cfc:	20000166 	.word	0x20000166
 8000d00:	20000167 	.word	0x20000167

08000d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d08:	b672      	cpsid	i
}
 8000d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <Error_Handler+0x8>
	...

08000d10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <HAL_MspInit+0x4c>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	4a0f      	ldr	r2, [pc, #60]	; (8000d5c <HAL_MspInit+0x4c>)
 8000d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d24:	6453      	str	r3, [r2, #68]	; 0x44
 8000d26:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <HAL_MspInit+0x4c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	603b      	str	r3, [r7, #0]
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <HAL_MspInit+0x4c>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <HAL_MspInit+0x4c>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d40:	6413      	str	r3, [r2, #64]	; 0x40
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_MspInit+0x4c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d4e:	2007      	movs	r0, #7
 8000d50:	f000 fae6 	bl	8001320 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40023800 	.word	0x40023800

08000d60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a22      	ldr	r2, [pc, #136]	; (8000df8 <HAL_TIM_PWM_MspInit+0x98>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d13e      	bne.n	8000df0 <HAL_TIM_PWM_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <HAL_TIM_PWM_MspInit+0x9c>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	4a20      	ldr	r2, [pc, #128]	; (8000dfc <HAL_TIM_PWM_MspInit+0x9c>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6453      	str	r3, [r2, #68]	; 0x44
 8000d82:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <HAL_TIM_PWM_MspInit+0x9c>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <HAL_TIM_PWM_MspInit+0xa0>)
 8000d90:	4a1c      	ldr	r2, [pc, #112]	; (8000e04 <HAL_TIM_PWM_MspInit+0xa4>)
 8000d92:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <HAL_TIM_PWM_MspInit+0xa0>)
 8000d96:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000d9a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d9c:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <HAL_TIM_PWM_MspInit+0xa0>)
 8000d9e:	2240      	movs	r2, #64	; 0x40
 8000da0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <HAL_TIM_PWM_MspInit+0xa0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000da8:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <HAL_TIM_PWM_MspInit+0xa0>)
 8000daa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dae:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <HAL_TIM_PWM_MspInit+0xa0>)
 8000db2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000db6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <HAL_TIM_PWM_MspInit+0xa0>)
 8000dba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dbe:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <HAL_TIM_PWM_MspInit+0xa0>)
 8000dc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dc6:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <HAL_TIM_PWM_MspInit+0xa0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <HAL_TIM_PWM_MspInit+0xa0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000dd4:	480a      	ldr	r0, [pc, #40]	; (8000e00 <HAL_TIM_PWM_MspInit+0xa0>)
 8000dd6:	f000 fae5 	bl	80013a4 <HAL_DMA_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 8000de0:	f7ff ff90 	bl	8000d04 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <HAL_TIM_PWM_MspInit+0xa0>)
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <HAL_TIM_PWM_MspInit+0xa0>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000df0:	bf00      	nop
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40010000 	.word	0x40010000
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	200000bc 	.word	0x200000bc
 8000e04:	40026428 	.word	0x40026428

08000e08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <HAL_TIM_Base_MspInit+0x3c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d10d      	bne.n	8000e36 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_TIM_Base_MspInit+0x40>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	4a09      	ldr	r2, [pc, #36]	; (8000e48 <HAL_TIM_Base_MspInit+0x40>)
 8000e24:	f043 0310 	orr.w	r3, r3, #16
 8000e28:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <HAL_TIM_Base_MspInit+0x40>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f003 0310 	and.w	r3, r3, #16
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	40001000 	.word	0x40001000
 8000e48:	40023800 	.word	0x40023800

08000e4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <HAL_TIM_MspPostInit+0x68>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d11e      	bne.n	8000eac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <HAL_TIM_MspPostInit+0x6c>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a10      	ldr	r2, [pc, #64]	; (8000eb8 <HAL_TIM_MspPostInit+0x6c>)
 8000e78:	f043 0310 	orr.w	r3, r3, #16
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_TIM_MspPostInit+0x6c>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0310 	and.w	r3, r3, #16
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <HAL_TIM_MspPostInit+0x70>)
 8000ea8:	f000 fe7e 	bl	8001ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000eac:	bf00      	nop
 8000eae:	3720      	adds	r7, #32
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40010000 	.word	0x40010000
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a1d      	ldr	r2, [pc, #116]	; (8000f54 <HAL_UART_MspInit+0x94>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d133      	bne.n	8000f4a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <HAL_UART_MspInit+0x98>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	4a1b      	ldr	r2, [pc, #108]	; (8000f58 <HAL_UART_MspInit+0x98>)
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_UART_MspInit+0x98>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_UART_MspInit+0x98>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <HAL_UART_MspInit+0x98>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_UART_MspInit+0x98>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f1a:	230c      	movs	r3, #12
 8000f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	4809      	ldr	r0, [pc, #36]	; (8000f5c <HAL_UART_MspInit+0x9c>)
 8000f36:	f000 fe37 	bl	8001ba8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2026      	movs	r0, #38	; 0x26
 8000f40:	f000 f9f9 	bl	8001336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f44:	2026      	movs	r0, #38	; 0x26
 8000f46:	f000 fa12 	bl	800136e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	3728      	adds	r7, #40	; 0x28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40004400 	.word	0x40004400
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020000 	.word	0x40020000

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <NMI_Handler+0x4>

08000f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <MemManage_Handler+0x4>

08000f72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <BusFault_Handler+0x4>

08000f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <UsageFault_Handler+0x4>

08000f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fac:	f000 f8a4 	bl	80010f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <USART2_IRQHandler+0x10>)
 8000fba:	f002 fd31 	bl	8003a20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000011c 	.word	0x2000011c

08000fc8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <DMA2_Stream1_IRQHandler+0x10>)
 8000fce:	f000 fb81 	bl	80016d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200000bc 	.word	0x200000bc

08000fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <SystemInit+0x20>)
 8000fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <SystemInit+0x20>)
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001038 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001004:	480d      	ldr	r0, [pc, #52]	; (800103c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001006:	490e      	ldr	r1, [pc, #56]	; (8001040 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001008:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800101c:	4c0b      	ldr	r4, [pc, #44]	; (800104c <LoopFillZerobss+0x26>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800102a:	f7ff ffd7 	bl	8000fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102e:	f003 fc67 	bl	8004900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001032:	f7ff fa47 	bl	80004c4 <main>
  bx  lr    
 8001036:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001038:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001044:	08004990 	.word	0x08004990
  ldr r2, =_sbss
 8001048:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800104c:	2000017c 	.word	0x2000017c

08001050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC_IRQHandler>
	...

08001054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_Init+0x40>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <HAL_Init+0x40>)
 800105e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001062:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <HAL_Init+0x40>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <HAL_Init+0x40>)
 800106a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <HAL_Init+0x40>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a07      	ldr	r2, [pc, #28]	; (8001094 <HAL_Init+0x40>)
 8001076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107c:	2003      	movs	r0, #3
 800107e:	f000 f94f 	bl	8001320 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001082:	2000      	movs	r0, #0
 8001084:	f000 f808 	bl	8001098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001088:	f7ff fe42 	bl	8000d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023c00 	.word	0x40023c00

08001098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x54>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_InitTick+0x58>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f967 	bl	800138a <HAL_SYSTICK_Config>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00e      	b.n	80010e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b0f      	cmp	r3, #15
 80010ca:	d80a      	bhi.n	80010e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010cc:	2200      	movs	r2, #0
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f000 f92f 	bl	8001336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d8:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <HAL_InitTick+0x5c>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	e000      	b.n	80010e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000004 	.word	0x20000004
 80010f0:	2000000c 	.word	0x2000000c
 80010f4:	20000008 	.word	0x20000008

080010f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x20>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x24>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <HAL_IncTick+0x24>)
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	2000000c 	.word	0x2000000c
 800111c:	20000178 	.word	0x20000178

08001120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return uwTick;
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <HAL_GetTick+0x14>)
 8001126:	681b      	ldr	r3, [r3, #0]
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000178 	.word	0x20000178

08001138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001140:	f7ff ffee 	bl	8001120 <HAL_GetTick>
 8001144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001150:	d005      	beq.n	800115e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_Delay+0x44>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800115e:	bf00      	nop
 8001160:	f7ff ffde 	bl	8001120 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	429a      	cmp	r2, r3
 800116e:	d8f7      	bhi.n	8001160 <HAL_Delay+0x28>
  {
  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2000000c 	.word	0x2000000c

08001180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800119c:	4013      	ands	r3, r2
 800119e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	f003 0307 	and.w	r3, r3, #7
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	db0b      	blt.n	800120e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	f003 021f 	and.w	r2, r3, #31
 80011fc:	4907      	ldr	r1, [pc, #28]	; (800121c <__NVIC_EnableIRQ+0x38>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	095b      	lsrs	r3, r3, #5
 8001204:	2001      	movs	r0, #1
 8001206:	fa00 f202 	lsl.w	r2, r0, r2
 800120a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000e100 	.word	0xe000e100

08001220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	2b00      	cmp	r3, #0
 8001232:	db0a      	blt.n	800124a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	b2da      	uxtb	r2, r3
 8001238:	490c      	ldr	r1, [pc, #48]	; (800126c <__NVIC_SetPriority+0x4c>)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	0112      	lsls	r2, r2, #4
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	440b      	add	r3, r1
 8001244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001248:	e00a      	b.n	8001260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4908      	ldr	r1, [pc, #32]	; (8001270 <__NVIC_SetPriority+0x50>)
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	3b04      	subs	r3, #4
 8001258:	0112      	lsls	r2, r2, #4
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	440b      	add	r3, r1
 800125e:	761a      	strb	r2, [r3, #24]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000e100 	.word	0xe000e100
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001274:	b480      	push	{r7}
 8001276:	b089      	sub	sp, #36	; 0x24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f1c3 0307 	rsb	r3, r3, #7
 800128e:	2b04      	cmp	r3, #4
 8001290:	bf28      	it	cs
 8001292:	2304      	movcs	r3, #4
 8001294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3304      	adds	r3, #4
 800129a:	2b06      	cmp	r3, #6
 800129c:	d902      	bls.n	80012a4 <NVIC_EncodePriority+0x30>
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3b03      	subs	r3, #3
 80012a2:	e000      	b.n	80012a6 <NVIC_EncodePriority+0x32>
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43da      	mvns	r2, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	401a      	ands	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012bc:	f04f 31ff 	mov.w	r1, #4294967295
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa01 f303 	lsl.w	r3, r1, r3
 80012c6:	43d9      	mvns	r1, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	4313      	orrs	r3, r2
         );
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3724      	adds	r7, #36	; 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012ec:	d301      	bcc.n	80012f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00f      	b.n	8001312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <SysTick_Config+0x40>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fa:	210f      	movs	r1, #15
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001300:	f7ff ff8e 	bl	8001220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <SysTick_Config+0x40>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130a:	4b04      	ldr	r3, [pc, #16]	; (800131c <SysTick_Config+0x40>)
 800130c:	2207      	movs	r2, #7
 800130e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	e000e010 	.word	0xe000e010

08001320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff29 	bl	8001180 <__NVIC_SetPriorityGrouping>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001348:	f7ff ff3e 	bl	80011c8 <__NVIC_GetPriorityGrouping>
 800134c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68b9      	ldr	r1, [r7, #8]
 8001352:	6978      	ldr	r0, [r7, #20]
 8001354:	f7ff ff8e 	bl	8001274 <NVIC_EncodePriority>
 8001358:	4602      	mov	r2, r0
 800135a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff5d 	bl	8001220 <__NVIC_SetPriority>
}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff31 	bl	80011e4 <__NVIC_EnableIRQ>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ffa2 	bl	80012dc <SysTick_Config>
 8001398:	4603      	mov	r3, r0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013b0:	f7ff feb6 	bl	8001120 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e099      	b.n	80014f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2202      	movs	r2, #2
 80013c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0201 	bic.w	r2, r2, #1
 80013de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e0:	e00f      	b.n	8001402 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013e2:	f7ff fe9d 	bl	8001120 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b05      	cmp	r3, #5
 80013ee:	d908      	bls.n	8001402 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2220      	movs	r2, #32
 80013f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2203      	movs	r2, #3
 80013fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e078      	b.n	80014f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1e8      	bne.n	80013e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	4b38      	ldr	r3, [pc, #224]	; (80014fc <HAL_DMA_Init+0x158>)
 800141c:	4013      	ands	r3, r2
 800141e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800142e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800143a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001446:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	4313      	orrs	r3, r2
 8001452:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	2b04      	cmp	r3, #4
 800145a:	d107      	bne.n	800146c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	4313      	orrs	r3, r2
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	4313      	orrs	r3, r2
 800146a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	f023 0307 	bic.w	r3, r3, #7
 8001482:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	4313      	orrs	r3, r2
 800148c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001492:	2b04      	cmp	r3, #4
 8001494:	d117      	bne.n	80014c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	4313      	orrs	r3, r2
 800149e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00e      	beq.n	80014c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 fb01 	bl	8001ab0 <DMA_CheckFifoParam>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d008      	beq.n	80014c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2240      	movs	r2, #64	; 0x40
 80014b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014c2:	2301      	movs	r3, #1
 80014c4:	e016      	b.n	80014f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 fab8 	bl	8001a44 <DMA_CalcBaseAndBitshift>
 80014d4:	4603      	mov	r3, r0
 80014d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014dc:	223f      	movs	r2, #63	; 0x3f
 80014de:	409a      	lsls	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	f010803f 	.word	0xf010803f

08001500 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001516:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800151e:	2b01      	cmp	r3, #1
 8001520:	d101      	bne.n	8001526 <HAL_DMA_Start_IT+0x26>
 8001522:	2302      	movs	r3, #2
 8001524:	e040      	b.n	80015a8 <HAL_DMA_Start_IT+0xa8>
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b01      	cmp	r3, #1
 8001538:	d12f      	bne.n	800159a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2202      	movs	r2, #2
 800153e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2200      	movs	r2, #0
 8001546:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f000 fa4a 	bl	80019e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001558:	223f      	movs	r2, #63	; 0x3f
 800155a:	409a      	lsls	r2, r3
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f042 0216 	orr.w	r2, r2, #22
 800156e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	2b00      	cmp	r3, #0
 8001576:	d007      	beq.n	8001588 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0208 	orr.w	r2, r2, #8
 8001586:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0201 	orr.w	r2, r2, #1
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	e005      	b.n	80015a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015a2:	2302      	movs	r3, #2
 80015a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015be:	f7ff fdaf 	bl	8001120 <HAL_GetTick>
 80015c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d008      	beq.n	80015e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2280      	movs	r2, #128	; 0x80
 80015d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e052      	b.n	8001688 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0216 	bic.w	r2, r2, #22
 80015f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	695a      	ldr	r2, [r3, #20]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001600:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	2b00      	cmp	r3, #0
 8001608:	d103      	bne.n	8001612 <HAL_DMA_Abort+0x62>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800160e:	2b00      	cmp	r3, #0
 8001610:	d007      	beq.n	8001622 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0208 	bic.w	r2, r2, #8
 8001620:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 0201 	bic.w	r2, r2, #1
 8001630:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001632:	e013      	b.n	800165c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001634:	f7ff fd74 	bl	8001120 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b05      	cmp	r3, #5
 8001640:	d90c      	bls.n	800165c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2220      	movs	r2, #32
 8001646:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2203      	movs	r2, #3
 800164c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e015      	b.n	8001688 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1e4      	bne.n	8001634 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166e:	223f      	movs	r2, #63	; 0x3f
 8001670:	409a      	lsls	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d004      	beq.n	80016ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2280      	movs	r2, #128	; 0x80
 80016a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00c      	b.n	80016c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2205      	movs	r2, #5
 80016b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0201 	bic.w	r2, r2, #1
 80016c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016e0:	4b8e      	ldr	r3, [pc, #568]	; (800191c <HAL_DMA_IRQHandler+0x248>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a8e      	ldr	r2, [pc, #568]	; (8001920 <HAL_DMA_IRQHandler+0x24c>)
 80016e6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ea:	0a9b      	lsrs	r3, r3, #10
 80016ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fe:	2208      	movs	r2, #8
 8001700:	409a      	lsls	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4013      	ands	r3, r2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d01a      	beq.n	8001740 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	d013      	beq.n	8001740 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0204 	bic.w	r2, r2, #4
 8001726:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172c:	2208      	movs	r2, #8
 800172e:	409a      	lsls	r2, r3
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001738:	f043 0201 	orr.w	r2, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001744:	2201      	movs	r2, #1
 8001746:	409a      	lsls	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4013      	ands	r3, r2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d012      	beq.n	8001776 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00b      	beq.n	8001776 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001762:	2201      	movs	r2, #1
 8001764:	409a      	lsls	r2, r3
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800176e:	f043 0202 	orr.w	r2, r3, #2
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177a:	2204      	movs	r2, #4
 800177c:	409a      	lsls	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4013      	ands	r3, r2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d012      	beq.n	80017ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d00b      	beq.n	80017ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001798:	2204      	movs	r2, #4
 800179a:	409a      	lsls	r2, r3
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a4:	f043 0204 	orr.w	r2, r3, #4
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b0:	2210      	movs	r2, #16
 80017b2:	409a      	lsls	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d043      	beq.n	8001844 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d03c      	beq.n	8001844 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ce:	2210      	movs	r2, #16
 80017d0:	409a      	lsls	r2, r3
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d018      	beq.n	8001816 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d108      	bne.n	8001804 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d024      	beq.n	8001844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	4798      	blx	r3
 8001802:	e01f      	b.n	8001844 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001808:	2b00      	cmp	r3, #0
 800180a:	d01b      	beq.n	8001844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	4798      	blx	r3
 8001814:	e016      	b.n	8001844 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001820:	2b00      	cmp	r3, #0
 8001822:	d107      	bne.n	8001834 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0208 	bic.w	r2, r2, #8
 8001832:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001848:	2220      	movs	r2, #32
 800184a:	409a      	lsls	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4013      	ands	r3, r2
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 808f 	beq.w	8001974 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 8087 	beq.w	8001974 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186a:	2220      	movs	r2, #32
 800186c:	409a      	lsls	r2, r3
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b05      	cmp	r3, #5
 800187c:	d136      	bne.n	80018ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 0216 	bic.w	r2, r2, #22
 800188c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800189c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d103      	bne.n	80018ae <HAL_DMA_IRQHandler+0x1da>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d007      	beq.n	80018be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0208 	bic.w	r2, r2, #8
 80018bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c2:	223f      	movs	r2, #63	; 0x3f
 80018c4:	409a      	lsls	r2, r3
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d07e      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	4798      	blx	r3
        }
        return;
 80018ea:	e079      	b.n	80019e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d01d      	beq.n	8001936 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10d      	bne.n	8001924 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190c:	2b00      	cmp	r3, #0
 800190e:	d031      	beq.n	8001974 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	4798      	blx	r3
 8001918:	e02c      	b.n	8001974 <HAL_DMA_IRQHandler+0x2a0>
 800191a:	bf00      	nop
 800191c:	20000004 	.word	0x20000004
 8001920:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001928:	2b00      	cmp	r3, #0
 800192a:	d023      	beq.n	8001974 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	4798      	blx	r3
 8001934:	e01e      	b.n	8001974 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10f      	bne.n	8001964 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0210 	bic.w	r2, r2, #16
 8001952:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001978:	2b00      	cmp	r3, #0
 800197a:	d032      	beq.n	80019e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b00      	cmp	r3, #0
 8001986:	d022      	beq.n	80019ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2205      	movs	r2, #5
 800198c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0201 	bic.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	3301      	adds	r3, #1
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d307      	bcc.n	80019bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f2      	bne.n	80019a0 <HAL_DMA_IRQHandler+0x2cc>
 80019ba:	e000      	b.n	80019be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80019bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d005      	beq.n	80019e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	4798      	blx	r3
 80019de:	e000      	b.n	80019e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80019e0:	bf00      	nop
    }
  }
}
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
 80019f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b40      	cmp	r3, #64	; 0x40
 8001a14:	d108      	bne.n	8001a28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a26:	e007      	b.n	8001a38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	60da      	str	r2, [r3, #12]
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	3b10      	subs	r3, #16
 8001a54:	4a14      	ldr	r2, [pc, #80]	; (8001aa8 <DMA_CalcBaseAndBitshift+0x64>)
 8001a56:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5a:	091b      	lsrs	r3, r3, #4
 8001a5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a5e:	4a13      	ldr	r2, [pc, #76]	; (8001aac <DMA_CalcBaseAndBitshift+0x68>)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4413      	add	r3, r2
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d909      	bls.n	8001a86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a7a:	f023 0303 	bic.w	r3, r3, #3
 8001a7e:	1d1a      	adds	r2, r3, #4
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	659a      	str	r2, [r3, #88]	; 0x58
 8001a84:	e007      	b.n	8001a96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a8e:	f023 0303 	bic.w	r3, r3, #3
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	aaaaaaab 	.word	0xaaaaaaab
 8001aac:	08004978 	.word	0x08004978

08001ab0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d11f      	bne.n	8001b0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d856      	bhi.n	8001b7e <DMA_CheckFifoParam+0xce>
 8001ad0:	a201      	add	r2, pc, #4	; (adr r2, 8001ad8 <DMA_CheckFifoParam+0x28>)
 8001ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad6:	bf00      	nop
 8001ad8:	08001ae9 	.word	0x08001ae9
 8001adc:	08001afb 	.word	0x08001afb
 8001ae0:	08001ae9 	.word	0x08001ae9
 8001ae4:	08001b7f 	.word	0x08001b7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d046      	beq.n	8001b82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001af8:	e043      	b.n	8001b82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b02:	d140      	bne.n	8001b86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b08:	e03d      	b.n	8001b86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b12:	d121      	bne.n	8001b58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d837      	bhi.n	8001b8a <DMA_CheckFifoParam+0xda>
 8001b1a:	a201      	add	r2, pc, #4	; (adr r2, 8001b20 <DMA_CheckFifoParam+0x70>)
 8001b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b20:	08001b31 	.word	0x08001b31
 8001b24:	08001b37 	.word	0x08001b37
 8001b28:	08001b31 	.word	0x08001b31
 8001b2c:	08001b49 	.word	0x08001b49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
      break;
 8001b34:	e030      	b.n	8001b98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d025      	beq.n	8001b8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b46:	e022      	b.n	8001b8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b50:	d11f      	bne.n	8001b92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b56:	e01c      	b.n	8001b92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d903      	bls.n	8001b66 <DMA_CheckFifoParam+0xb6>
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d003      	beq.n	8001b6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b64:	e018      	b.n	8001b98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	73fb      	strb	r3, [r7, #15]
      break;
 8001b6a:	e015      	b.n	8001b98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00e      	beq.n	8001b96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b7c:	e00b      	b.n	8001b96 <DMA_CheckFifoParam+0xe6>
      break;
 8001b7e:	bf00      	nop
 8001b80:	e00a      	b.n	8001b98 <DMA_CheckFifoParam+0xe8>
      break;
 8001b82:	bf00      	nop
 8001b84:	e008      	b.n	8001b98 <DMA_CheckFifoParam+0xe8>
      break;
 8001b86:	bf00      	nop
 8001b88:	e006      	b.n	8001b98 <DMA_CheckFifoParam+0xe8>
      break;
 8001b8a:	bf00      	nop
 8001b8c:	e004      	b.n	8001b98 <DMA_CheckFifoParam+0xe8>
      break;
 8001b8e:	bf00      	nop
 8001b90:	e002      	b.n	8001b98 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b92:	bf00      	nop
 8001b94:	e000      	b.n	8001b98 <DMA_CheckFifoParam+0xe8>
      break;
 8001b96:	bf00      	nop
    }
  } 
  
  return status; 
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop

08001ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	e16b      	b.n	8001e9c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	f040 815a 	bne.w	8001e96 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d005      	beq.n	8001bfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d130      	bne.n	8001c5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	2203      	movs	r2, #3
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c30:	2201      	movs	r2, #1
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	f003 0201 	and.w	r2, r3, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d017      	beq.n	8001c98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	2203      	movs	r2, #3
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d123      	bne.n	8001cec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	08da      	lsrs	r2, r3, #3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3208      	adds	r2, #8
 8001cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	220f      	movs	r2, #15
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	08da      	lsrs	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3208      	adds	r2, #8
 8001ce6:	69b9      	ldr	r1, [r7, #24]
 8001ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0203 	and.w	r2, r3, #3
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80b4 	beq.w	8001e96 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b60      	ldr	r3, [pc, #384]	; (8001eb4 <HAL_GPIO_Init+0x30c>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	4a5f      	ldr	r2, [pc, #380]	; (8001eb4 <HAL_GPIO_Init+0x30c>)
 8001d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3e:	4b5d      	ldr	r3, [pc, #372]	; (8001eb4 <HAL_GPIO_Init+0x30c>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d4a:	4a5b      	ldr	r2, [pc, #364]	; (8001eb8 <HAL_GPIO_Init+0x310>)
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	3302      	adds	r3, #2
 8001d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	220f      	movs	r2, #15
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a52      	ldr	r2, [pc, #328]	; (8001ebc <HAL_GPIO_Init+0x314>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d02b      	beq.n	8001dce <HAL_GPIO_Init+0x226>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a51      	ldr	r2, [pc, #324]	; (8001ec0 <HAL_GPIO_Init+0x318>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d025      	beq.n	8001dca <HAL_GPIO_Init+0x222>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a50      	ldr	r2, [pc, #320]	; (8001ec4 <HAL_GPIO_Init+0x31c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d01f      	beq.n	8001dc6 <HAL_GPIO_Init+0x21e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a4f      	ldr	r2, [pc, #316]	; (8001ec8 <HAL_GPIO_Init+0x320>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d019      	beq.n	8001dc2 <HAL_GPIO_Init+0x21a>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4e      	ldr	r2, [pc, #312]	; (8001ecc <HAL_GPIO_Init+0x324>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d013      	beq.n	8001dbe <HAL_GPIO_Init+0x216>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4d      	ldr	r2, [pc, #308]	; (8001ed0 <HAL_GPIO_Init+0x328>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d00d      	beq.n	8001dba <HAL_GPIO_Init+0x212>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4c      	ldr	r2, [pc, #304]	; (8001ed4 <HAL_GPIO_Init+0x32c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d007      	beq.n	8001db6 <HAL_GPIO_Init+0x20e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4b      	ldr	r2, [pc, #300]	; (8001ed8 <HAL_GPIO_Init+0x330>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d101      	bne.n	8001db2 <HAL_GPIO_Init+0x20a>
 8001dae:	2307      	movs	r3, #7
 8001db0:	e00e      	b.n	8001dd0 <HAL_GPIO_Init+0x228>
 8001db2:	2308      	movs	r3, #8
 8001db4:	e00c      	b.n	8001dd0 <HAL_GPIO_Init+0x228>
 8001db6:	2306      	movs	r3, #6
 8001db8:	e00a      	b.n	8001dd0 <HAL_GPIO_Init+0x228>
 8001dba:	2305      	movs	r3, #5
 8001dbc:	e008      	b.n	8001dd0 <HAL_GPIO_Init+0x228>
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	e006      	b.n	8001dd0 <HAL_GPIO_Init+0x228>
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e004      	b.n	8001dd0 <HAL_GPIO_Init+0x228>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e002      	b.n	8001dd0 <HAL_GPIO_Init+0x228>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <HAL_GPIO_Init+0x228>
 8001dce:	2300      	movs	r3, #0
 8001dd0:	69fa      	ldr	r2, [r7, #28]
 8001dd2:	f002 0203 	and.w	r2, r2, #3
 8001dd6:	0092      	lsls	r2, r2, #2
 8001dd8:	4093      	lsls	r3, r2
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001de0:	4935      	ldr	r1, [pc, #212]	; (8001eb8 <HAL_GPIO_Init+0x310>)
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	089b      	lsrs	r3, r3, #2
 8001de6:	3302      	adds	r3, #2
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dee:	4b3b      	ldr	r3, [pc, #236]	; (8001edc <HAL_GPIO_Init+0x334>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e12:	4a32      	ldr	r2, [pc, #200]	; (8001edc <HAL_GPIO_Init+0x334>)
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e18:	4b30      	ldr	r3, [pc, #192]	; (8001edc <HAL_GPIO_Init+0x334>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e3c:	4a27      	ldr	r2, [pc, #156]	; (8001edc <HAL_GPIO_Init+0x334>)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e42:	4b26      	ldr	r3, [pc, #152]	; (8001edc <HAL_GPIO_Init+0x334>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e66:	4a1d      	ldr	r2, [pc, #116]	; (8001edc <HAL_GPIO_Init+0x334>)
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <HAL_GPIO_Init+0x334>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e90:	4a12      	ldr	r2, [pc, #72]	; (8001edc <HAL_GPIO_Init+0x334>)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	61fb      	str	r3, [r7, #28]
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	2b0f      	cmp	r3, #15
 8001ea0:	f67f ae90 	bls.w	8001bc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	3724      	adds	r7, #36	; 0x24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40013800 	.word	0x40013800
 8001ebc:	40020000 	.word	0x40020000
 8001ec0:	40020400 	.word	0x40020400
 8001ec4:	40020800 	.word	0x40020800
 8001ec8:	40020c00 	.word	0x40020c00
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40021400 	.word	0x40021400
 8001ed4:	40021800 	.word	0x40021800
 8001ed8:	40021c00 	.word	0x40021c00
 8001edc:	40013c00 	.word	0x40013c00

08001ee0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	887b      	ldrh	r3, [r7, #2]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d002      	beq.n	8001efe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
 8001efc:	e001      	b.n	8001f02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	807b      	strh	r3, [r7, #2]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f20:	787b      	ldrb	r3, [r7, #1]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f26:	887a      	ldrh	r2, [r7, #2]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f2c:	e003      	b.n	8001f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f2e:	887b      	ldrh	r3, [r7, #2]
 8001f30:	041a      	lsls	r2, r3, #16
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	619a      	str	r2, [r3, #24]
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e267      	b.n	8002426 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d075      	beq.n	800204e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f62:	4b88      	ldr	r3, [pc, #544]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d00c      	beq.n	8001f88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f6e:	4b85      	ldr	r3, [pc, #532]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d112      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f7a:	4b82      	ldr	r3, [pc, #520]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f86:	d10b      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f88:	4b7e      	ldr	r3, [pc, #504]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d05b      	beq.n	800204c <HAL_RCC_OscConfig+0x108>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d157      	bne.n	800204c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e242      	b.n	8002426 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa8:	d106      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x74>
 8001faa:	4b76      	ldr	r3, [pc, #472]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a75      	ldr	r2, [pc, #468]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e01d      	b.n	8001ff4 <HAL_RCC_OscConfig+0xb0>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fc0:	d10c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x98>
 8001fc2:	4b70      	ldr	r3, [pc, #448]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a6f      	ldr	r2, [pc, #444]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 8001fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	4b6d      	ldr	r3, [pc, #436]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a6c      	ldr	r2, [pc, #432]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	e00b      	b.n	8001ff4 <HAL_RCC_OscConfig+0xb0>
 8001fdc:	4b69      	ldr	r3, [pc, #420]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a68      	ldr	r2, [pc, #416]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 8001fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	4b66      	ldr	r3, [pc, #408]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a65      	ldr	r2, [pc, #404]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 8001fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d013      	beq.n	8002024 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7ff f890 	bl	8001120 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002004:	f7ff f88c 	bl	8001120 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b64      	cmp	r3, #100	; 0x64
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e207      	b.n	8002426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002016:	4b5b      	ldr	r3, [pc, #364]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0xc0>
 8002022:	e014      	b.n	800204e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002024:	f7ff f87c 	bl	8001120 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800202c:	f7ff f878 	bl	8001120 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b64      	cmp	r3, #100	; 0x64
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e1f3      	b.n	8002426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203e:	4b51      	ldr	r3, [pc, #324]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f0      	bne.n	800202c <HAL_RCC_OscConfig+0xe8>
 800204a:	e000      	b.n	800204e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d063      	beq.n	8002122 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800205a:	4b4a      	ldr	r3, [pc, #296]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00b      	beq.n	800207e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002066:	4b47      	ldr	r3, [pc, #284]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800206e:	2b08      	cmp	r3, #8
 8002070:	d11c      	bne.n	80020ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002072:	4b44      	ldr	r3, [pc, #272]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d116      	bne.n	80020ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800207e:	4b41      	ldr	r3, [pc, #260]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d005      	beq.n	8002096 <HAL_RCC_OscConfig+0x152>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d001      	beq.n	8002096 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e1c7      	b.n	8002426 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002096:	4b3b      	ldr	r3, [pc, #236]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4937      	ldr	r1, [pc, #220]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020aa:	e03a      	b.n	8002122 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d020      	beq.n	80020f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020b4:	4b34      	ldr	r3, [pc, #208]	; (8002188 <HAL_RCC_OscConfig+0x244>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ba:	f7ff f831 	bl	8001120 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c2:	f7ff f82d 	bl	8001120 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e1a8      	b.n	8002426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d4:	4b2b      	ldr	r3, [pc, #172]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e0:	4b28      	ldr	r3, [pc, #160]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4925      	ldr	r1, [pc, #148]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	600b      	str	r3, [r1, #0]
 80020f4:	e015      	b.n	8002122 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020f6:	4b24      	ldr	r3, [pc, #144]	; (8002188 <HAL_RCC_OscConfig+0x244>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7ff f810 	bl	8001120 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002104:	f7ff f80c 	bl	8001120 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e187      	b.n	8002426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002116:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d036      	beq.n	800219c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d016      	beq.n	8002164 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_RCC_OscConfig+0x248>)
 8002138:	2201      	movs	r2, #1
 800213a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213c:	f7fe fff0 	bl	8001120 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002144:	f7fe ffec 	bl	8001120 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e167      	b.n	8002426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_RCC_OscConfig+0x240>)
 8002158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <HAL_RCC_OscConfig+0x200>
 8002162:	e01b      	b.n	800219c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002164:	4b09      	ldr	r3, [pc, #36]	; (800218c <HAL_RCC_OscConfig+0x248>)
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216a:	f7fe ffd9 	bl	8001120 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002170:	e00e      	b.n	8002190 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002172:	f7fe ffd5 	bl	8001120 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d907      	bls.n	8002190 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e150      	b.n	8002426 <HAL_RCC_OscConfig+0x4e2>
 8002184:	40023800 	.word	0x40023800
 8002188:	42470000 	.word	0x42470000
 800218c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002190:	4b88      	ldr	r3, [pc, #544]	; (80023b4 <HAL_RCC_OscConfig+0x470>)
 8002192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1ea      	bne.n	8002172 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 8097 	beq.w	80022d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ae:	4b81      	ldr	r3, [pc, #516]	; (80023b4 <HAL_RCC_OscConfig+0x470>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10f      	bne.n	80021da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	4b7d      	ldr	r3, [pc, #500]	; (80023b4 <HAL_RCC_OscConfig+0x470>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	4a7c      	ldr	r2, [pc, #496]	; (80023b4 <HAL_RCC_OscConfig+0x470>)
 80021c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ca:	4b7a      	ldr	r3, [pc, #488]	; (80023b4 <HAL_RCC_OscConfig+0x470>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021d6:	2301      	movs	r3, #1
 80021d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021da:	4b77      	ldr	r3, [pc, #476]	; (80023b8 <HAL_RCC_OscConfig+0x474>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d118      	bne.n	8002218 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021e6:	4b74      	ldr	r3, [pc, #464]	; (80023b8 <HAL_RCC_OscConfig+0x474>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a73      	ldr	r2, [pc, #460]	; (80023b8 <HAL_RCC_OscConfig+0x474>)
 80021ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f2:	f7fe ff95 	bl	8001120 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fa:	f7fe ff91 	bl	8001120 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e10c      	b.n	8002426 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220c:	4b6a      	ldr	r3, [pc, #424]	; (80023b8 <HAL_RCC_OscConfig+0x474>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f0      	beq.n	80021fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d106      	bne.n	800222e <HAL_RCC_OscConfig+0x2ea>
 8002220:	4b64      	ldr	r3, [pc, #400]	; (80023b4 <HAL_RCC_OscConfig+0x470>)
 8002222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002224:	4a63      	ldr	r2, [pc, #396]	; (80023b4 <HAL_RCC_OscConfig+0x470>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	6713      	str	r3, [r2, #112]	; 0x70
 800222c:	e01c      	b.n	8002268 <HAL_RCC_OscConfig+0x324>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b05      	cmp	r3, #5
 8002234:	d10c      	bne.n	8002250 <HAL_RCC_OscConfig+0x30c>
 8002236:	4b5f      	ldr	r3, [pc, #380]	; (80023b4 <HAL_RCC_OscConfig+0x470>)
 8002238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223a:	4a5e      	ldr	r2, [pc, #376]	; (80023b4 <HAL_RCC_OscConfig+0x470>)
 800223c:	f043 0304 	orr.w	r3, r3, #4
 8002240:	6713      	str	r3, [r2, #112]	; 0x70
 8002242:	4b5c      	ldr	r3, [pc, #368]	; (80023b4 <HAL_RCC_OscConfig+0x470>)
 8002244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002246:	4a5b      	ldr	r2, [pc, #364]	; (80023b4 <HAL_RCC_OscConfig+0x470>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6713      	str	r3, [r2, #112]	; 0x70
 800224e:	e00b      	b.n	8002268 <HAL_RCC_OscConfig+0x324>
 8002250:	4b58      	ldr	r3, [pc, #352]	; (80023b4 <HAL_RCC_OscConfig+0x470>)
 8002252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002254:	4a57      	ldr	r2, [pc, #348]	; (80023b4 <HAL_RCC_OscConfig+0x470>)
 8002256:	f023 0301 	bic.w	r3, r3, #1
 800225a:	6713      	str	r3, [r2, #112]	; 0x70
 800225c:	4b55      	ldr	r3, [pc, #340]	; (80023b4 <HAL_RCC_OscConfig+0x470>)
 800225e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002260:	4a54      	ldr	r2, [pc, #336]	; (80023b4 <HAL_RCC_OscConfig+0x470>)
 8002262:	f023 0304 	bic.w	r3, r3, #4
 8002266:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d015      	beq.n	800229c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002270:	f7fe ff56 	bl	8001120 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002276:	e00a      	b.n	800228e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002278:	f7fe ff52 	bl	8001120 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	f241 3288 	movw	r2, #5000	; 0x1388
 8002286:	4293      	cmp	r3, r2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e0cb      	b.n	8002426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228e:	4b49      	ldr	r3, [pc, #292]	; (80023b4 <HAL_RCC_OscConfig+0x470>)
 8002290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0ee      	beq.n	8002278 <HAL_RCC_OscConfig+0x334>
 800229a:	e014      	b.n	80022c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229c:	f7fe ff40 	bl	8001120 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a2:	e00a      	b.n	80022ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a4:	f7fe ff3c 	bl	8001120 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e0b5      	b.n	8002426 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ba:	4b3e      	ldr	r3, [pc, #248]	; (80023b4 <HAL_RCC_OscConfig+0x470>)
 80022bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1ee      	bne.n	80022a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022c6:	7dfb      	ldrb	r3, [r7, #23]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d105      	bne.n	80022d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022cc:	4b39      	ldr	r3, [pc, #228]	; (80023b4 <HAL_RCC_OscConfig+0x470>)
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	4a38      	ldr	r2, [pc, #224]	; (80023b4 <HAL_RCC_OscConfig+0x470>)
 80022d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 80a1 	beq.w	8002424 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022e2:	4b34      	ldr	r3, [pc, #208]	; (80023b4 <HAL_RCC_OscConfig+0x470>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d05c      	beq.n	80023a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d141      	bne.n	800237a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f6:	4b31      	ldr	r3, [pc, #196]	; (80023bc <HAL_RCC_OscConfig+0x478>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7fe ff10 	bl	8001120 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002304:	f7fe ff0c 	bl	8001120 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e087      	b.n	8002426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002316:	4b27      	ldr	r3, [pc, #156]	; (80023b4 <HAL_RCC_OscConfig+0x470>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	019b      	lsls	r3, r3, #6
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	085b      	lsrs	r3, r3, #1
 800233a:	3b01      	subs	r3, #1
 800233c:	041b      	lsls	r3, r3, #16
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	061b      	lsls	r3, r3, #24
 8002346:	491b      	ldr	r1, [pc, #108]	; (80023b4 <HAL_RCC_OscConfig+0x470>)
 8002348:	4313      	orrs	r3, r2
 800234a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800234c:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <HAL_RCC_OscConfig+0x478>)
 800234e:	2201      	movs	r2, #1
 8002350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002352:	f7fe fee5 	bl	8001120 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800235a:	f7fe fee1 	bl	8001120 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e05c      	b.n	8002426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236c:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <HAL_RCC_OscConfig+0x470>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x416>
 8002378:	e054      	b.n	8002424 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237a:	4b10      	ldr	r3, [pc, #64]	; (80023bc <HAL_RCC_OscConfig+0x478>)
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002380:	f7fe fece 	bl	8001120 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002388:	f7fe feca 	bl	8001120 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e045      	b.n	8002426 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <HAL_RCC_OscConfig+0x470>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f0      	bne.n	8002388 <HAL_RCC_OscConfig+0x444>
 80023a6:	e03d      	b.n	8002424 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d107      	bne.n	80023c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e038      	b.n	8002426 <HAL_RCC_OscConfig+0x4e2>
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40007000 	.word	0x40007000
 80023bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023c0:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <HAL_RCC_OscConfig+0x4ec>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d028      	beq.n	8002420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023d8:	429a      	cmp	r2, r3
 80023da:	d121      	bne.n	8002420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d11a      	bne.n	8002420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023f0:	4013      	ands	r3, r2
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d111      	bne.n	8002420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	085b      	lsrs	r3, r3, #1
 8002408:	3b01      	subs	r3, #1
 800240a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800240c:	429a      	cmp	r2, r3
 800240e:	d107      	bne.n	8002420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800241c:	429a      	cmp	r2, r3
 800241e:	d001      	beq.n	8002424 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40023800 	.word	0x40023800

08002434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0cc      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002448:	4b68      	ldr	r3, [pc, #416]	; (80025ec <HAL_RCC_ClockConfig+0x1b8>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d90c      	bls.n	8002470 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002456:	4b65      	ldr	r3, [pc, #404]	; (80025ec <HAL_RCC_ClockConfig+0x1b8>)
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800245e:	4b63      	ldr	r3, [pc, #396]	; (80025ec <HAL_RCC_ClockConfig+0x1b8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0b8      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d020      	beq.n	80024be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002488:	4b59      	ldr	r3, [pc, #356]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	4a58      	ldr	r2, [pc, #352]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002492:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024a0:	4b53      	ldr	r3, [pc, #332]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	4a52      	ldr	r2, [pc, #328]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ac:	4b50      	ldr	r3, [pc, #320]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	494d      	ldr	r1, [pc, #308]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d044      	beq.n	8002554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d107      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	4b47      	ldr	r3, [pc, #284]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d119      	bne.n	8002512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e07f      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d003      	beq.n	80024f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	d107      	bne.n	8002502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f2:	4b3f      	ldr	r3, [pc, #252]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d109      	bne.n	8002512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e06f      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002502:	4b3b      	ldr	r3, [pc, #236]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e067      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002512:	4b37      	ldr	r3, [pc, #220]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f023 0203 	bic.w	r2, r3, #3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4934      	ldr	r1, [pc, #208]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	4313      	orrs	r3, r2
 8002522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002524:	f7fe fdfc 	bl	8001120 <HAL_GetTick>
 8002528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252a:	e00a      	b.n	8002542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800252c:	f7fe fdf8 	bl	8001120 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	f241 3288 	movw	r2, #5000	; 0x1388
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e04f      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002542:	4b2b      	ldr	r3, [pc, #172]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 020c 	and.w	r2, r3, #12
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	429a      	cmp	r2, r3
 8002552:	d1eb      	bne.n	800252c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002554:	4b25      	ldr	r3, [pc, #148]	; (80025ec <HAL_RCC_ClockConfig+0x1b8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d20c      	bcs.n	800257c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002562:	4b22      	ldr	r3, [pc, #136]	; (80025ec <HAL_RCC_ClockConfig+0x1b8>)
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	4b20      	ldr	r3, [pc, #128]	; (80025ec <HAL_RCC_ClockConfig+0x1b8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d001      	beq.n	800257c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e032      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002588:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	4916      	ldr	r1, [pc, #88]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	4313      	orrs	r3, r2
 8002598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d009      	beq.n	80025ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025a6:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	490e      	ldr	r1, [pc, #56]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025ba:	f000 f821 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80025be:	4602      	mov	r2, r0
 80025c0:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	091b      	lsrs	r3, r3, #4
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	490a      	ldr	r1, [pc, #40]	; (80025f4 <HAL_RCC_ClockConfig+0x1c0>)
 80025cc:	5ccb      	ldrb	r3, [r1, r3]
 80025ce:	fa22 f303 	lsr.w	r3, r2, r3
 80025d2:	4a09      	ldr	r2, [pc, #36]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025d6:	4b09      	ldr	r3, [pc, #36]	; (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe fd5c 	bl	8001098 <HAL_InitTick>

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40023c00 	.word	0x40023c00
 80025f0:	40023800 	.word	0x40023800
 80025f4:	08004960 	.word	0x08004960
 80025f8:	20000004 	.word	0x20000004
 80025fc:	20000008 	.word	0x20000008

08002600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002604:	b094      	sub	sp, #80	; 0x50
 8002606:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	647b      	str	r3, [r7, #68]	; 0x44
 800260c:	2300      	movs	r3, #0
 800260e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002610:	2300      	movs	r3, #0
 8002612:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002618:	4b79      	ldr	r3, [pc, #484]	; (8002800 <HAL_RCC_GetSysClockFreq+0x200>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 030c 	and.w	r3, r3, #12
 8002620:	2b08      	cmp	r3, #8
 8002622:	d00d      	beq.n	8002640 <HAL_RCC_GetSysClockFreq+0x40>
 8002624:	2b08      	cmp	r3, #8
 8002626:	f200 80e1 	bhi.w	80027ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0x34>
 800262e:	2b04      	cmp	r3, #4
 8002630:	d003      	beq.n	800263a <HAL_RCC_GetSysClockFreq+0x3a>
 8002632:	e0db      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002634:	4b73      	ldr	r3, [pc, #460]	; (8002804 <HAL_RCC_GetSysClockFreq+0x204>)
 8002636:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002638:	e0db      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800263a:	4b73      	ldr	r3, [pc, #460]	; (8002808 <HAL_RCC_GetSysClockFreq+0x208>)
 800263c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800263e:	e0d8      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002640:	4b6f      	ldr	r3, [pc, #444]	; (8002800 <HAL_RCC_GetSysClockFreq+0x200>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002648:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800264a:	4b6d      	ldr	r3, [pc, #436]	; (8002800 <HAL_RCC_GetSysClockFreq+0x200>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d063      	beq.n	800271e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002656:	4b6a      	ldr	r3, [pc, #424]	; (8002800 <HAL_RCC_GetSysClockFreq+0x200>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	099b      	lsrs	r3, r3, #6
 800265c:	2200      	movs	r2, #0
 800265e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002660:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002668:	633b      	str	r3, [r7, #48]	; 0x30
 800266a:	2300      	movs	r3, #0
 800266c:	637b      	str	r3, [r7, #52]	; 0x34
 800266e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002672:	4622      	mov	r2, r4
 8002674:	462b      	mov	r3, r5
 8002676:	f04f 0000 	mov.w	r0, #0
 800267a:	f04f 0100 	mov.w	r1, #0
 800267e:	0159      	lsls	r1, r3, #5
 8002680:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002684:	0150      	lsls	r0, r2, #5
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4621      	mov	r1, r4
 800268c:	1a51      	subs	r1, r2, r1
 800268e:	6139      	str	r1, [r7, #16]
 8002690:	4629      	mov	r1, r5
 8002692:	eb63 0301 	sbc.w	r3, r3, r1
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026a4:	4659      	mov	r1, fp
 80026a6:	018b      	lsls	r3, r1, #6
 80026a8:	4651      	mov	r1, sl
 80026aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ae:	4651      	mov	r1, sl
 80026b0:	018a      	lsls	r2, r1, #6
 80026b2:	4651      	mov	r1, sl
 80026b4:	ebb2 0801 	subs.w	r8, r2, r1
 80026b8:	4659      	mov	r1, fp
 80026ba:	eb63 0901 	sbc.w	r9, r3, r1
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026d2:	4690      	mov	r8, r2
 80026d4:	4699      	mov	r9, r3
 80026d6:	4623      	mov	r3, r4
 80026d8:	eb18 0303 	adds.w	r3, r8, r3
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	462b      	mov	r3, r5
 80026e0:	eb49 0303 	adc.w	r3, r9, r3
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	f04f 0300 	mov.w	r3, #0
 80026ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026f2:	4629      	mov	r1, r5
 80026f4:	024b      	lsls	r3, r1, #9
 80026f6:	4621      	mov	r1, r4
 80026f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026fc:	4621      	mov	r1, r4
 80026fe:	024a      	lsls	r2, r1, #9
 8002700:	4610      	mov	r0, r2
 8002702:	4619      	mov	r1, r3
 8002704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002706:	2200      	movs	r2, #0
 8002708:	62bb      	str	r3, [r7, #40]	; 0x28
 800270a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800270c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002710:	f7fd fd5a 	bl	80001c8 <__aeabi_uldivmod>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4613      	mov	r3, r2
 800271a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800271c:	e058      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800271e:	4b38      	ldr	r3, [pc, #224]	; (8002800 <HAL_RCC_GetSysClockFreq+0x200>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	099b      	lsrs	r3, r3, #6
 8002724:	2200      	movs	r2, #0
 8002726:	4618      	mov	r0, r3
 8002728:	4611      	mov	r1, r2
 800272a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800272e:	623b      	str	r3, [r7, #32]
 8002730:	2300      	movs	r3, #0
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
 8002734:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002738:	4642      	mov	r2, r8
 800273a:	464b      	mov	r3, r9
 800273c:	f04f 0000 	mov.w	r0, #0
 8002740:	f04f 0100 	mov.w	r1, #0
 8002744:	0159      	lsls	r1, r3, #5
 8002746:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800274a:	0150      	lsls	r0, r2, #5
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4641      	mov	r1, r8
 8002752:	ebb2 0a01 	subs.w	sl, r2, r1
 8002756:	4649      	mov	r1, r9
 8002758:	eb63 0b01 	sbc.w	fp, r3, r1
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002768:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800276c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002770:	ebb2 040a 	subs.w	r4, r2, sl
 8002774:	eb63 050b 	sbc.w	r5, r3, fp
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	00eb      	lsls	r3, r5, #3
 8002782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002786:	00e2      	lsls	r2, r4, #3
 8002788:	4614      	mov	r4, r2
 800278a:	461d      	mov	r5, r3
 800278c:	4643      	mov	r3, r8
 800278e:	18e3      	adds	r3, r4, r3
 8002790:	603b      	str	r3, [r7, #0]
 8002792:	464b      	mov	r3, r9
 8002794:	eb45 0303 	adc.w	r3, r5, r3
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027a6:	4629      	mov	r1, r5
 80027a8:	028b      	lsls	r3, r1, #10
 80027aa:	4621      	mov	r1, r4
 80027ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027b0:	4621      	mov	r1, r4
 80027b2:	028a      	lsls	r2, r1, #10
 80027b4:	4610      	mov	r0, r2
 80027b6:	4619      	mov	r1, r3
 80027b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ba:	2200      	movs	r2, #0
 80027bc:	61bb      	str	r3, [r7, #24]
 80027be:	61fa      	str	r2, [r7, #28]
 80027c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027c4:	f7fd fd00 	bl	80001c8 <__aeabi_uldivmod>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4613      	mov	r3, r2
 80027ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HAL_RCC_GetSysClockFreq+0x200>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	0c1b      	lsrs	r3, r3, #16
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	3301      	adds	r3, #1
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80027e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027ea:	e002      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HAL_RCC_GetSysClockFreq+0x204>)
 80027ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3750      	adds	r7, #80	; 0x50
 80027f8:	46bd      	mov	sp, r7
 80027fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027fe:	bf00      	nop
 8002800:	40023800 	.word	0x40023800
 8002804:	00f42400 	.word	0x00f42400
 8002808:	007a1200 	.word	0x007a1200

0800280c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002810:	4b03      	ldr	r3, [pc, #12]	; (8002820 <HAL_RCC_GetHCLKFreq+0x14>)
 8002812:	681b      	ldr	r3, [r3, #0]
}
 8002814:	4618      	mov	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	20000004 	.word	0x20000004

08002824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002828:	f7ff fff0 	bl	800280c <HAL_RCC_GetHCLKFreq>
 800282c:	4602      	mov	r2, r0
 800282e:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	0a9b      	lsrs	r3, r3, #10
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	4903      	ldr	r1, [pc, #12]	; (8002848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800283a:	5ccb      	ldrb	r3, [r1, r3]
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40023800 	.word	0x40023800
 8002848:	08004970 	.word	0x08004970

0800284c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002850:	f7ff ffdc 	bl	800280c <HAL_RCC_GetHCLKFreq>
 8002854:	4602      	mov	r2, r0
 8002856:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	0b5b      	lsrs	r3, r3, #13
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	4903      	ldr	r1, [pc, #12]	; (8002870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002862:	5ccb      	ldrb	r3, [r1, r3]
 8002864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002868:	4618      	mov	r0, r3
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40023800 	.word	0x40023800
 8002870:	08004970 	.word	0x08004970

08002874 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e041      	b.n	800290a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fe fab4 	bl	8000e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3304      	adds	r3, #4
 80028b0:	4619      	mov	r1, r3
 80028b2:	4610      	mov	r0, r2
 80028b4:	f000 fc60 	bl	8003178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b01      	cmp	r3, #1
 8002926:	d001      	beq.n	800292c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e046      	b.n	80029ba <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a23      	ldr	r2, [pc, #140]	; (80029c8 <HAL_TIM_Base_Start+0xb4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d022      	beq.n	8002984 <HAL_TIM_Base_Start+0x70>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002946:	d01d      	beq.n	8002984 <HAL_TIM_Base_Start+0x70>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a1f      	ldr	r2, [pc, #124]	; (80029cc <HAL_TIM_Base_Start+0xb8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d018      	beq.n	8002984 <HAL_TIM_Base_Start+0x70>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a1e      	ldr	r2, [pc, #120]	; (80029d0 <HAL_TIM_Base_Start+0xbc>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d013      	beq.n	8002984 <HAL_TIM_Base_Start+0x70>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a1c      	ldr	r2, [pc, #112]	; (80029d4 <HAL_TIM_Base_Start+0xc0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d00e      	beq.n	8002984 <HAL_TIM_Base_Start+0x70>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a1b      	ldr	r2, [pc, #108]	; (80029d8 <HAL_TIM_Base_Start+0xc4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d009      	beq.n	8002984 <HAL_TIM_Base_Start+0x70>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a19      	ldr	r2, [pc, #100]	; (80029dc <HAL_TIM_Base_Start+0xc8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d004      	beq.n	8002984 <HAL_TIM_Base_Start+0x70>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a18      	ldr	r2, [pc, #96]	; (80029e0 <HAL_TIM_Base_Start+0xcc>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d111      	bne.n	80029a8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b06      	cmp	r3, #6
 8002994:	d010      	beq.n	80029b8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f042 0201 	orr.w	r2, r2, #1
 80029a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a6:	e007      	b.n	80029b8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40010000 	.word	0x40010000
 80029cc:	40000400 	.word	0x40000400
 80029d0:	40000800 	.word	0x40000800
 80029d4:	40000c00 	.word	0x40000c00
 80029d8:	40010400 	.word	0x40010400
 80029dc:	40014000 	.word	0x40014000
 80029e0:	40001800 	.word	0x40001800

080029e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e041      	b.n	8002a7a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fe f9a8 	bl	8000d60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	4619      	mov	r1, r3
 8002a22:	4610      	mov	r0, r2
 8002a24:	f000 fba8 	bl	8003178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d109      	bne.n	8002ab0 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	bf0c      	ite	eq
 8002aa8:	2301      	moveq	r3, #1
 8002aaa:	2300      	movne	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	e022      	b.n	8002af6 <HAL_TIM_PWM_Start_DMA+0x72>
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d109      	bne.n	8002aca <HAL_TIM_PWM_Start_DMA+0x46>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	bf0c      	ite	eq
 8002ac2:	2301      	moveq	r3, #1
 8002ac4:	2300      	movne	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	e015      	b.n	8002af6 <HAL_TIM_PWM_Start_DMA+0x72>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d109      	bne.n	8002ae4 <HAL_TIM_PWM_Start_DMA+0x60>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	bf0c      	ite	eq
 8002adc:	2301      	moveq	r3, #1
 8002ade:	2300      	movne	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	e008      	b.n	8002af6 <HAL_TIM_PWM_Start_DMA+0x72>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	bf0c      	ite	eq
 8002af0:	2301      	moveq	r3, #1
 8002af2:	2300      	movne	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002afa:	2302      	movs	r3, #2
 8002afc:	e171      	b.n	8002de2 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d109      	bne.n	8002b18 <HAL_TIM_PWM_Start_DMA+0x94>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	e022      	b.n	8002b5e <HAL_TIM_PWM_Start_DMA+0xda>
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d109      	bne.n	8002b32 <HAL_TIM_PWM_Start_DMA+0xae>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	bf0c      	ite	eq
 8002b2a:	2301      	moveq	r3, #1
 8002b2c:	2300      	movne	r3, #0
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	e015      	b.n	8002b5e <HAL_TIM_PWM_Start_DMA+0xda>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d109      	bne.n	8002b4c <HAL_TIM_PWM_Start_DMA+0xc8>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	bf0c      	ite	eq
 8002b44:	2301      	moveq	r3, #1
 8002b46:	2300      	movne	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	e008      	b.n	8002b5e <HAL_TIM_PWM_Start_DMA+0xda>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	bf0c      	ite	eq
 8002b58:	2301      	moveq	r3, #1
 8002b5a:	2300      	movne	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d024      	beq.n	8002bac <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d104      	bne.n	8002b72 <HAL_TIM_PWM_Start_DMA+0xee>
 8002b68:	887b      	ldrh	r3, [r7, #2]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e137      	b.n	8002de2 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d104      	bne.n	8002b82 <HAL_TIM_PWM_Start_DMA+0xfe>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b80:	e016      	b.n	8002bb0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d104      	bne.n	8002b92 <HAL_TIM_PWM_Start_DMA+0x10e>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b90:	e00e      	b.n	8002bb0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d104      	bne.n	8002ba2 <HAL_TIM_PWM_Start_DMA+0x11e>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ba0:	e006      	b.n	8002bb0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002baa:	e001      	b.n	8002bb0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e118      	b.n	8002de2 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b0c      	cmp	r3, #12
 8002bb4:	f200 80ae 	bhi.w	8002d14 <HAL_TIM_PWM_Start_DMA+0x290>
 8002bb8:	a201      	add	r2, pc, #4	; (adr r2, 8002bc0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8002bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bbe:	bf00      	nop
 8002bc0:	08002bf5 	.word	0x08002bf5
 8002bc4:	08002d15 	.word	0x08002d15
 8002bc8:	08002d15 	.word	0x08002d15
 8002bcc:	08002d15 	.word	0x08002d15
 8002bd0:	08002c3d 	.word	0x08002c3d
 8002bd4:	08002d15 	.word	0x08002d15
 8002bd8:	08002d15 	.word	0x08002d15
 8002bdc:	08002d15 	.word	0x08002d15
 8002be0:	08002c85 	.word	0x08002c85
 8002be4:	08002d15 	.word	0x08002d15
 8002be8:	08002d15 	.word	0x08002d15
 8002bec:	08002d15 	.word	0x08002d15
 8002bf0:	08002ccd 	.word	0x08002ccd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	4a7c      	ldr	r2, [pc, #496]	; (8002dec <HAL_TIM_PWM_Start_DMA+0x368>)
 8002bfa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	4a7b      	ldr	r2, [pc, #492]	; (8002df0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002c02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	4a7a      	ldr	r2, [pc, #488]	; (8002df4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002c0a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3334      	adds	r3, #52	; 0x34
 8002c18:	461a      	mov	r2, r3
 8002c1a:	887b      	ldrh	r3, [r7, #2]
 8002c1c:	f7fe fc70 	bl	8001500 <HAL_DMA_Start_IT>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e0db      	b.n	8002de2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c38:	60da      	str	r2, [r3, #12]
      break;
 8002c3a:	e06e      	b.n	8002d1a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	4a6a      	ldr	r2, [pc, #424]	; (8002dec <HAL_TIM_PWM_Start_DMA+0x368>)
 8002c42:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	4a69      	ldr	r2, [pc, #420]	; (8002df0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c50:	4a68      	ldr	r2, [pc, #416]	; (8002df4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002c52:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	3338      	adds	r3, #56	; 0x38
 8002c60:	461a      	mov	r2, r3
 8002c62:	887b      	ldrh	r3, [r7, #2]
 8002c64:	f7fe fc4c 	bl	8001500 <HAL_DMA_Start_IT>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e0b7      	b.n	8002de2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c80:	60da      	str	r2, [r3, #12]
      break;
 8002c82:	e04a      	b.n	8002d1a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	4a58      	ldr	r2, [pc, #352]	; (8002dec <HAL_TIM_PWM_Start_DMA+0x368>)
 8002c8a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	4a57      	ldr	r2, [pc, #348]	; (8002df0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	4a56      	ldr	r2, [pc, #344]	; (8002df4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002c9a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	333c      	adds	r3, #60	; 0x3c
 8002ca8:	461a      	mov	r2, r3
 8002caa:	887b      	ldrh	r3, [r7, #2]
 8002cac:	f7fe fc28 	bl	8001500 <HAL_DMA_Start_IT>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e093      	b.n	8002de2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cc8:	60da      	str	r2, [r3, #12]
      break;
 8002cca:	e026      	b.n	8002d1a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	4a46      	ldr	r2, [pc, #280]	; (8002dec <HAL_TIM_PWM_Start_DMA+0x368>)
 8002cd2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	4a45      	ldr	r2, [pc, #276]	; (8002df0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8002cda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	4a44      	ldr	r2, [pc, #272]	; (8002df4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8002ce2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3340      	adds	r3, #64	; 0x40
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	887b      	ldrh	r3, [r7, #2]
 8002cf4:	f7fe fc04 	bl	8001500 <HAL_DMA_Start_IT>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e06f      	b.n	8002de2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d10:	60da      	str	r2, [r3, #12]
      break;
 8002d12:	e002      	b.n	8002d1a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	75fb      	strb	r3, [r7, #23]
      break;
 8002d18:	bf00      	nop
  }

  if (status == HAL_OK)
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d15f      	bne.n	8002de0 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2201      	movs	r2, #1
 8002d26:	68b9      	ldr	r1, [r7, #8]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 fc75 	bl	8003618 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a31      	ldr	r2, [pc, #196]	; (8002df8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d004      	beq.n	8002d42 <HAL_TIM_PWM_Start_DMA+0x2be>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a2f      	ldr	r2, [pc, #188]	; (8002dfc <HAL_TIM_PWM_Start_DMA+0x378>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d101      	bne.n	8002d46 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8002d46:	2300      	movs	r3, #0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d007      	beq.n	8002d5c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d5a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a25      	ldr	r2, [pc, #148]	; (8002df8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d022      	beq.n	8002dac <HAL_TIM_PWM_Start_DMA+0x328>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6e:	d01d      	beq.n	8002dac <HAL_TIM_PWM_Start_DMA+0x328>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a22      	ldr	r2, [pc, #136]	; (8002e00 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d018      	beq.n	8002dac <HAL_TIM_PWM_Start_DMA+0x328>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a21      	ldr	r2, [pc, #132]	; (8002e04 <HAL_TIM_PWM_Start_DMA+0x380>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d013      	beq.n	8002dac <HAL_TIM_PWM_Start_DMA+0x328>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a1f      	ldr	r2, [pc, #124]	; (8002e08 <HAL_TIM_PWM_Start_DMA+0x384>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00e      	beq.n	8002dac <HAL_TIM_PWM_Start_DMA+0x328>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a1a      	ldr	r2, [pc, #104]	; (8002dfc <HAL_TIM_PWM_Start_DMA+0x378>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d009      	beq.n	8002dac <HAL_TIM_PWM_Start_DMA+0x328>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a1b      	ldr	r2, [pc, #108]	; (8002e0c <HAL_TIM_PWM_Start_DMA+0x388>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d004      	beq.n	8002dac <HAL_TIM_PWM_Start_DMA+0x328>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a1a      	ldr	r2, [pc, #104]	; (8002e10 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d111      	bne.n	8002dd0 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	2b06      	cmp	r3, #6
 8002dbc:	d010      	beq.n	8002de0 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0201 	orr.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dce:	e007      	b.n	8002de0 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	08003067 	.word	0x08003067
 8002df0:	0800310f 	.word	0x0800310f
 8002df4:	08002fd5 	.word	0x08002fd5
 8002df8:	40010000 	.word	0x40010000
 8002dfc:	40010400 	.word	0x40010400
 8002e00:	40000400 	.word	0x40000400
 8002e04:	40000800 	.word	0x40000800
 8002e08:	40000c00 	.word	0x40000c00
 8002e0c:	40014000 	.word	0x40014000
 8002e10:	40001800 	.word	0x40001800

08002e14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e0ae      	b.n	8002f90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b0c      	cmp	r3, #12
 8002e3e:	f200 809f 	bhi.w	8002f80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e7d 	.word	0x08002e7d
 8002e4c:	08002f81 	.word	0x08002f81
 8002e50:	08002f81 	.word	0x08002f81
 8002e54:	08002f81 	.word	0x08002f81
 8002e58:	08002ebd 	.word	0x08002ebd
 8002e5c:	08002f81 	.word	0x08002f81
 8002e60:	08002f81 	.word	0x08002f81
 8002e64:	08002f81 	.word	0x08002f81
 8002e68:	08002eff 	.word	0x08002eff
 8002e6c:	08002f81 	.word	0x08002f81
 8002e70:	08002f81 	.word	0x08002f81
 8002e74:	08002f81 	.word	0x08002f81
 8002e78:	08002f3f 	.word	0x08002f3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 fa18 	bl	80032b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699a      	ldr	r2, [r3, #24]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0208 	orr.w	r2, r2, #8
 8002e96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699a      	ldr	r2, [r3, #24]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0204 	bic.w	r2, r2, #4
 8002ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6999      	ldr	r1, [r3, #24]
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	691a      	ldr	r2, [r3, #16]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	619a      	str	r2, [r3, #24]
      break;
 8002eba:	e064      	b.n	8002f86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 fa68 	bl	8003398 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699a      	ldr	r2, [r3, #24]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ed6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6999      	ldr	r1, [r3, #24]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	021a      	lsls	r2, r3, #8
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	619a      	str	r2, [r3, #24]
      break;
 8002efc:	e043      	b.n	8002f86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68b9      	ldr	r1, [r7, #8]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 fabd 	bl	8003484 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	69da      	ldr	r2, [r3, #28]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f042 0208 	orr.w	r2, r2, #8
 8002f18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	69da      	ldr	r2, [r3, #28]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0204 	bic.w	r2, r2, #4
 8002f28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	69d9      	ldr	r1, [r3, #28]
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	61da      	str	r2, [r3, #28]
      break;
 8002f3c:	e023      	b.n	8002f86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68b9      	ldr	r1, [r7, #8]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 fb11 	bl	800356c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	69da      	ldr	r2, [r3, #28]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	69da      	ldr	r2, [r3, #28]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69d9      	ldr	r1, [r3, #28]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	021a      	lsls	r2, r3, #8
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	61da      	str	r2, [r3, #28]
      break;
 8002f7e:	e002      	b.n	8002f86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	75fb      	strb	r3, [r7, #23]
      break;
 8002f84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d107      	bne.n	8002ffc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ffa:	e02a      	b.n	8003052 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	429a      	cmp	r2, r3
 8003004:	d107      	bne.n	8003016 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2202      	movs	r2, #2
 800300a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003014:	e01d      	b.n	8003052 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	429a      	cmp	r2, r3
 800301e:	d107      	bne.n	8003030 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2204      	movs	r2, #4
 8003024:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800302e:	e010      	b.n	8003052 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	429a      	cmp	r2, r3
 8003038:	d107      	bne.n	800304a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2208      	movs	r2, #8
 800303e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003048:	e003      	b.n	8003052 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f7ff ffb4 	bl	8002fc0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	771a      	strb	r2, [r3, #28]
}
 800305e:	bf00      	nop
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b084      	sub	sp, #16
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003072:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	429a      	cmp	r2, r3
 800307c:	d10b      	bne.n	8003096 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2201      	movs	r2, #1
 8003082:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d136      	bne.n	80030fa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003094:	e031      	b.n	80030fa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	429a      	cmp	r2, r3
 800309e:	d10b      	bne.n	80030b8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2202      	movs	r2, #2
 80030a4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d125      	bne.n	80030fa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030b6:	e020      	b.n	80030fa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d10b      	bne.n	80030da <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2204      	movs	r2, #4
 80030c6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d114      	bne.n	80030fa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030d8:	e00f      	b.n	80030fa <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d10a      	bne.n	80030fa <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2208      	movs	r2, #8
 80030e8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d103      	bne.n	80030fa <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f7ff ff4c 	bl	8002f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	771a      	strb	r2, [r3, #28]
}
 8003106:	bf00      	nop
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b084      	sub	sp, #16
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	429a      	cmp	r2, r3
 8003124:	d103      	bne.n	800312e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	771a      	strb	r2, [r3, #28]
 800312c:	e019      	b.n	8003162 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	429a      	cmp	r2, r3
 8003136:	d103      	bne.n	8003140 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2202      	movs	r2, #2
 800313c:	771a      	strb	r2, [r3, #28]
 800313e:	e010      	b.n	8003162 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	429a      	cmp	r2, r3
 8003148:	d103      	bne.n	8003152 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2204      	movs	r2, #4
 800314e:	771a      	strb	r2, [r3, #28]
 8003150:	e007      	b.n	8003162 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	429a      	cmp	r2, r3
 800315a:	d102      	bne.n	8003162 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2208      	movs	r2, #8
 8003160:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f7ff ff22 	bl	8002fac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	771a      	strb	r2, [r3, #28]
}
 800316e:	bf00      	nop
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a40      	ldr	r2, [pc, #256]	; (800328c <TIM_Base_SetConfig+0x114>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d013      	beq.n	80031b8 <TIM_Base_SetConfig+0x40>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003196:	d00f      	beq.n	80031b8 <TIM_Base_SetConfig+0x40>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a3d      	ldr	r2, [pc, #244]	; (8003290 <TIM_Base_SetConfig+0x118>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d00b      	beq.n	80031b8 <TIM_Base_SetConfig+0x40>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a3c      	ldr	r2, [pc, #240]	; (8003294 <TIM_Base_SetConfig+0x11c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d007      	beq.n	80031b8 <TIM_Base_SetConfig+0x40>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a3b      	ldr	r2, [pc, #236]	; (8003298 <TIM_Base_SetConfig+0x120>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d003      	beq.n	80031b8 <TIM_Base_SetConfig+0x40>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a3a      	ldr	r2, [pc, #232]	; (800329c <TIM_Base_SetConfig+0x124>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d108      	bne.n	80031ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a2f      	ldr	r2, [pc, #188]	; (800328c <TIM_Base_SetConfig+0x114>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d02b      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d8:	d027      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a2c      	ldr	r2, [pc, #176]	; (8003290 <TIM_Base_SetConfig+0x118>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d023      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a2b      	ldr	r2, [pc, #172]	; (8003294 <TIM_Base_SetConfig+0x11c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d01f      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a2a      	ldr	r2, [pc, #168]	; (8003298 <TIM_Base_SetConfig+0x120>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d01b      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a29      	ldr	r2, [pc, #164]	; (800329c <TIM_Base_SetConfig+0x124>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d017      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a28      	ldr	r2, [pc, #160]	; (80032a0 <TIM_Base_SetConfig+0x128>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a27      	ldr	r2, [pc, #156]	; (80032a4 <TIM_Base_SetConfig+0x12c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00f      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a26      	ldr	r2, [pc, #152]	; (80032a8 <TIM_Base_SetConfig+0x130>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00b      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a25      	ldr	r2, [pc, #148]	; (80032ac <TIM_Base_SetConfig+0x134>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d007      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a24      	ldr	r2, [pc, #144]	; (80032b0 <TIM_Base_SetConfig+0x138>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d003      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a23      	ldr	r2, [pc, #140]	; (80032b4 <TIM_Base_SetConfig+0x13c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d108      	bne.n	800323c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4313      	orrs	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a0a      	ldr	r2, [pc, #40]	; (800328c <TIM_Base_SetConfig+0x114>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d003      	beq.n	8003270 <TIM_Base_SetConfig+0xf8>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a0c      	ldr	r2, [pc, #48]	; (800329c <TIM_Base_SetConfig+0x124>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d103      	bne.n	8003278 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	615a      	str	r2, [r3, #20]
}
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40010000 	.word	0x40010000
 8003290:	40000400 	.word	0x40000400
 8003294:	40000800 	.word	0x40000800
 8003298:	40000c00 	.word	0x40000c00
 800329c:	40010400 	.word	0x40010400
 80032a0:	40014000 	.word	0x40014000
 80032a4:	40014400 	.word	0x40014400
 80032a8:	40014800 	.word	0x40014800
 80032ac:	40001800 	.word	0x40001800
 80032b0:	40001c00 	.word	0x40001c00
 80032b4:	40002000 	.word	0x40002000

080032b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	f023 0201 	bic.w	r2, r3, #1
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 0303 	bic.w	r3, r3, #3
 80032ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f023 0302 	bic.w	r3, r3, #2
 8003300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	4313      	orrs	r3, r2
 800330a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a20      	ldr	r2, [pc, #128]	; (8003390 <TIM_OC1_SetConfig+0xd8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d003      	beq.n	800331c <TIM_OC1_SetConfig+0x64>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a1f      	ldr	r2, [pc, #124]	; (8003394 <TIM_OC1_SetConfig+0xdc>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d10c      	bne.n	8003336 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f023 0308 	bic.w	r3, r3, #8
 8003322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	4313      	orrs	r3, r2
 800332c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f023 0304 	bic.w	r3, r3, #4
 8003334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a15      	ldr	r2, [pc, #84]	; (8003390 <TIM_OC1_SetConfig+0xd8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d003      	beq.n	8003346 <TIM_OC1_SetConfig+0x8e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a14      	ldr	r2, [pc, #80]	; (8003394 <TIM_OC1_SetConfig+0xdc>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d111      	bne.n	800336a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800334c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	621a      	str	r2, [r3, #32]
}
 8003384:	bf00      	nop
 8003386:	371c      	adds	r7, #28
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	40010000 	.word	0x40010000
 8003394:	40010400 	.word	0x40010400

08003398 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	f023 0210 	bic.w	r2, r3, #16
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	021b      	lsls	r3, r3, #8
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4313      	orrs	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f023 0320 	bic.w	r3, r3, #32
 80033e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a22      	ldr	r2, [pc, #136]	; (800347c <TIM_OC2_SetConfig+0xe4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d003      	beq.n	8003400 <TIM_OC2_SetConfig+0x68>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a21      	ldr	r2, [pc, #132]	; (8003480 <TIM_OC2_SetConfig+0xe8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d10d      	bne.n	800341c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800341a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a17      	ldr	r2, [pc, #92]	; (800347c <TIM_OC2_SetConfig+0xe4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d003      	beq.n	800342c <TIM_OC2_SetConfig+0x94>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a16      	ldr	r2, [pc, #88]	; (8003480 <TIM_OC2_SetConfig+0xe8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d113      	bne.n	8003454 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003432:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800343a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	621a      	str	r2, [r3, #32]
}
 800346e:	bf00      	nop
 8003470:	371c      	adds	r7, #28
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40010000 	.word	0x40010000
 8003480:	40010400 	.word	0x40010400

08003484 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0303 	bic.w	r3, r3, #3
 80034ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a21      	ldr	r2, [pc, #132]	; (8003564 <TIM_OC3_SetConfig+0xe0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d003      	beq.n	80034ea <TIM_OC3_SetConfig+0x66>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a20      	ldr	r2, [pc, #128]	; (8003568 <TIM_OC3_SetConfig+0xe4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d10d      	bne.n	8003506 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	021b      	lsls	r3, r3, #8
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a16      	ldr	r2, [pc, #88]	; (8003564 <TIM_OC3_SetConfig+0xe0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d003      	beq.n	8003516 <TIM_OC3_SetConfig+0x92>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a15      	ldr	r2, [pc, #84]	; (8003568 <TIM_OC3_SetConfig+0xe4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d113      	bne.n	800353e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800351c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	621a      	str	r2, [r3, #32]
}
 8003558:	bf00      	nop
 800355a:	371c      	adds	r7, #28
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	40010000 	.word	0x40010000
 8003568:	40010400 	.word	0x40010400

0800356c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800359a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	021b      	lsls	r3, r3, #8
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	031b      	lsls	r3, r3, #12
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a12      	ldr	r2, [pc, #72]	; (8003610 <TIM_OC4_SetConfig+0xa4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d003      	beq.n	80035d4 <TIM_OC4_SetConfig+0x68>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a11      	ldr	r2, [pc, #68]	; (8003614 <TIM_OC4_SetConfig+0xa8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d109      	bne.n	80035e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	019b      	lsls	r3, r3, #6
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	621a      	str	r2, [r3, #32]
}
 8003602:	bf00      	nop
 8003604:	371c      	adds	r7, #28
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40010000 	.word	0x40010000
 8003614:	40010400 	.word	0x40010400

08003618 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003618:	b480      	push	{r7}
 800361a:	b087      	sub	sp, #28
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f003 031f 	and.w	r3, r3, #31
 800362a:	2201      	movs	r2, #1
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a1a      	ldr	r2, [r3, #32]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	43db      	mvns	r3, r3
 800363a:	401a      	ands	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a1a      	ldr	r2, [r3, #32]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f003 031f 	and.w	r3, r3, #31
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	fa01 f303 	lsl.w	r3, r1, r3
 8003650:	431a      	orrs	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	621a      	str	r2, [r3, #32]
}
 8003656:	bf00      	nop
 8003658:	371c      	adds	r7, #28
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
	...

08003664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003678:	2302      	movs	r3, #2
 800367a:	e05a      	b.n	8003732 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a21      	ldr	r2, [pc, #132]	; (8003740 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d022      	beq.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c8:	d01d      	beq.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1d      	ldr	r2, [pc, #116]	; (8003744 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d018      	beq.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a1b      	ldr	r2, [pc, #108]	; (8003748 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d013      	beq.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a1a      	ldr	r2, [pc, #104]	; (800374c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d00e      	beq.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a18      	ldr	r2, [pc, #96]	; (8003750 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d009      	beq.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a17      	ldr	r2, [pc, #92]	; (8003754 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d004      	beq.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a15      	ldr	r2, [pc, #84]	; (8003758 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d10c      	bne.n	8003720 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800370c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	4313      	orrs	r3, r2
 8003716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40010000 	.word	0x40010000
 8003744:	40000400 	.word	0x40000400
 8003748:	40000800 	.word	0x40000800
 800374c:	40000c00 	.word	0x40000c00
 8003750:	40010400 	.word	0x40010400
 8003754:	40014000 	.word	0x40014000
 8003758:	40001800 	.word	0x40001800

0800375c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003774:	2302      	movs	r3, #2
 8003776:	e03d      	b.n	80037f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	4313      	orrs	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e03f      	b.n	8003892 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fd fb4a 	bl	8000ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2224      	movs	r2, #36	; 0x24
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003842:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 fddf 	bl	8004408 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003858:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695a      	ldr	r2, [r3, #20]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003868:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003878:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b08a      	sub	sp, #40	; 0x28
 800389e:	af02      	add	r7, sp, #8
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	603b      	str	r3, [r7, #0]
 80038a6:	4613      	mov	r3, r2
 80038a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d17c      	bne.n	80039b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <HAL_UART_Transmit+0x2c>
 80038c0:	88fb      	ldrh	r3, [r7, #6]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e075      	b.n	80039b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_UART_Transmit+0x3e>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e06e      	b.n	80039b6 <HAL_UART_Transmit+0x11c>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2221      	movs	r2, #33	; 0x21
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038ee:	f7fd fc17 	bl	8001120 <HAL_GetTick>
 80038f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	88fa      	ldrh	r2, [r7, #6]
 80038f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	88fa      	ldrh	r2, [r7, #6]
 80038fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003908:	d108      	bne.n	800391c <HAL_UART_Transmit+0x82>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d104      	bne.n	800391c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	61bb      	str	r3, [r7, #24]
 800391a:	e003      	b.n	8003924 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003920:	2300      	movs	r3, #0
 8003922:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800392c:	e02a      	b.n	8003984 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2200      	movs	r2, #0
 8003936:	2180      	movs	r1, #128	; 0x80
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 fb1f 	bl	8003f7c <UART_WaitOnFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e036      	b.n	80039b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10b      	bne.n	8003966 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800395c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	3302      	adds	r3, #2
 8003962:	61bb      	str	r3, [r7, #24]
 8003964:	e007      	b.n	8003976 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	781a      	ldrb	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	3301      	adds	r3, #1
 8003974:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1cf      	bne.n	800392e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2200      	movs	r2, #0
 8003996:	2140      	movs	r1, #64	; 0x40
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 faef 	bl	8003f7c <UART_WaitOnFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e006      	b.n	80039b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	e000      	b.n	80039b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039b4:	2302      	movs	r3, #2
  }
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3720      	adds	r7, #32
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b084      	sub	sp, #16
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	4613      	mov	r3, r2
 80039ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d11d      	bne.n	8003a14 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_UART_Receive_IT+0x26>
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e016      	b.n	8003a16 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_UART_Receive_IT+0x38>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e00f      	b.n	8003a16 <HAL_UART_Receive_IT+0x58>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a04:	88fb      	ldrh	r3, [r7, #6]
 8003a06:	461a      	mov	r2, r3
 8003a08:	68b9      	ldr	r1, [r7, #8]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 fb24 	bl	8004058 <UART_Start_Receive_IT>
 8003a10:	4603      	mov	r3, r0
 8003a12:	e000      	b.n	8003a16 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003a14:	2302      	movs	r3, #2
  }
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b0ba      	sub	sp, #232	; 0xe8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10f      	bne.n	8003a86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d009      	beq.n	8003a86 <HAL_UART_IRQHandler+0x66>
 8003a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 fc07 	bl	8004292 <UART_Receive_IT>
      return;
 8003a84:	e256      	b.n	8003f34 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80de 	beq.w	8003c4c <HAL_UART_IRQHandler+0x22c>
 8003a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d106      	bne.n	8003aaa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aa0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80d1 	beq.w	8003c4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00b      	beq.n	8003ace <HAL_UART_IRQHandler+0xae>
 8003ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d005      	beq.n	8003ace <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	f043 0201 	orr.w	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <HAL_UART_IRQHandler+0xd2>
 8003ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	f043 0202 	orr.w	r2, r3, #2
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00b      	beq.n	8003b16 <HAL_UART_IRQHandler+0xf6>
 8003afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f043 0204 	orr.w	r2, r3, #4
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d011      	beq.n	8003b46 <HAL_UART_IRQHandler+0x126>
 8003b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d105      	bne.n	8003b3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f043 0208 	orr.w	r2, r3, #8
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 81ed 	beq.w	8003f2a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b54:	f003 0320 	and.w	r3, r3, #32
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_UART_IRQHandler+0x14e>
 8003b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b60:	f003 0320 	and.w	r3, r3, #32
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fb92 	bl	8004292 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b78:	2b40      	cmp	r3, #64	; 0x40
 8003b7a:	bf0c      	ite	eq
 8003b7c:	2301      	moveq	r3, #1
 8003b7e:	2300      	movne	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d103      	bne.n	8003b9a <HAL_UART_IRQHandler+0x17a>
 8003b92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d04f      	beq.n	8003c3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fa9a 	bl	80040d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003baa:	2b40      	cmp	r3, #64	; 0x40
 8003bac:	d141      	bne.n	8003c32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3314      	adds	r3, #20
 8003bb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
 8003bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3314      	adds	r3, #20
 8003bd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003be6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bea:	e841 2300 	strex	r3, r2, [r1]
 8003bee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1d9      	bne.n	8003bae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d013      	beq.n	8003c2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c06:	4a7d      	ldr	r2, [pc, #500]	; (8003dfc <HAL_UART_IRQHandler+0x3dc>)
 8003c08:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fd fd3e 	bl	8001690 <HAL_DMA_Abort_IT>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d016      	beq.n	8003c48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c24:	4610      	mov	r0, r2
 8003c26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c28:	e00e      	b.n	8003c48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f990 	bl	8003f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c30:	e00a      	b.n	8003c48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f98c 	bl	8003f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c38:	e006      	b.n	8003c48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f988 	bl	8003f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c46:	e170      	b.n	8003f2a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c48:	bf00      	nop
    return;
 8003c4a:	e16e      	b.n	8003f2a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	f040 814a 	bne.w	8003eea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c5a:	f003 0310 	and.w	r3, r3, #16
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 8143 	beq.w	8003eea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 813c 	beq.w	8003eea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c72:	2300      	movs	r3, #0
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c92:	2b40      	cmp	r3, #64	; 0x40
 8003c94:	f040 80b4 	bne.w	8003e00 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ca4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 8140 	beq.w	8003f2e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	f080 8139 	bcs.w	8003f2e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cc2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cce:	f000 8088 	beq.w	8003de2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	330c      	adds	r3, #12
 8003cd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ce8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	330c      	adds	r3, #12
 8003cfa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003cfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d0e:	e841 2300 	strex	r3, r2, [r1]
 8003d12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1d9      	bne.n	8003cd2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	3314      	adds	r3, #20
 8003d24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d28:	e853 3f00 	ldrex	r3, [r3]
 8003d2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d30:	f023 0301 	bic.w	r3, r3, #1
 8003d34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3314      	adds	r3, #20
 8003d3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d4e:	e841 2300 	strex	r3, r2, [r1]
 8003d52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1e1      	bne.n	8003d1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3314      	adds	r3, #20
 8003d60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d64:	e853 3f00 	ldrex	r3, [r3]
 8003d68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3314      	adds	r3, #20
 8003d7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1e3      	bne.n	8003d5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	330c      	adds	r3, #12
 8003da6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003daa:	e853 3f00 	ldrex	r3, [r3]
 8003dae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db2:	f023 0310 	bic.w	r3, r3, #16
 8003db6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	330c      	adds	r3, #12
 8003dc0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003dc4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003dc6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dcc:	e841 2300 	strex	r3, r2, [r1]
 8003dd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1e3      	bne.n	8003da0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fd fbe7 	bl	80015b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	4619      	mov	r1, r3
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f8b6 	bl	8003f64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003df8:	e099      	b.n	8003f2e <HAL_UART_IRQHandler+0x50e>
 8003dfa:	bf00      	nop
 8003dfc:	0800419b 	.word	0x0800419b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 808b 	beq.w	8003f32 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 8086 	beq.w	8003f32 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	330c      	adds	r3, #12
 8003e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	330c      	adds	r3, #12
 8003e46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e4a:	647a      	str	r2, [r7, #68]	; 0x44
 8003e4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e3      	bne.n	8003e26 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3314      	adds	r3, #20
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	e853 3f00 	ldrex	r3, [r3]
 8003e6c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	f023 0301 	bic.w	r3, r3, #1
 8003e74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3314      	adds	r3, #20
 8003e7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e82:	633a      	str	r2, [r7, #48]	; 0x30
 8003e84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e3      	bne.n	8003e5e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	330c      	adds	r3, #12
 8003eaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	e853 3f00 	ldrex	r3, [r3]
 8003eb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0310 	bic.w	r3, r3, #16
 8003eba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	330c      	adds	r3, #12
 8003ec4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ec8:	61fa      	str	r2, [r7, #28]
 8003eca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ecc:	69b9      	ldr	r1, [r7, #24]
 8003ece:	69fa      	ldr	r2, [r7, #28]
 8003ed0:	e841 2300 	strex	r3, r2, [r1]
 8003ed4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e3      	bne.n	8003ea4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003edc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f83e 	bl	8003f64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ee8:	e023      	b.n	8003f32 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <HAL_UART_IRQHandler+0x4ea>
 8003ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f95d 	bl	80041c2 <UART_Transmit_IT>
    return;
 8003f08:	e014      	b.n	8003f34 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00e      	beq.n	8003f34 <HAL_UART_IRQHandler+0x514>
 8003f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d008      	beq.n	8003f34 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f99d 	bl	8004262 <UART_EndTransmit_IT>
    return;
 8003f28:	e004      	b.n	8003f34 <HAL_UART_IRQHandler+0x514>
    return;
 8003f2a:	bf00      	nop
 8003f2c:	e002      	b.n	8003f34 <HAL_UART_IRQHandler+0x514>
      return;
 8003f2e:	bf00      	nop
 8003f30:	e000      	b.n	8003f34 <HAL_UART_IRQHandler+0x514>
      return;
 8003f32:	bf00      	nop
  }
}
 8003f34:	37e8      	adds	r7, #232	; 0xe8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop

08003f3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b090      	sub	sp, #64	; 0x40
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f8c:	e050      	b.n	8004030 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f94:	d04c      	beq.n	8004030 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d007      	beq.n	8003fac <UART_WaitOnFlagUntilTimeout+0x30>
 8003f9c:	f7fd f8c0 	bl	8001120 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d241      	bcs.n	8004030 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	330c      	adds	r3, #12
 8003fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	e853 3f00 	ldrex	r3, [r3]
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	330c      	adds	r3, #12
 8003fca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fcc:	637a      	str	r2, [r7, #52]	; 0x34
 8003fce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fd4:	e841 2300 	strex	r3, r2, [r1]
 8003fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1e5      	bne.n	8003fac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3314      	adds	r3, #20
 8003fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	e853 3f00 	ldrex	r3, [r3]
 8003fee:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f023 0301 	bic.w	r3, r3, #1
 8003ff6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3314      	adds	r3, #20
 8003ffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004000:	623a      	str	r2, [r7, #32]
 8004002:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004004:	69f9      	ldr	r1, [r7, #28]
 8004006:	6a3a      	ldr	r2, [r7, #32]
 8004008:	e841 2300 	strex	r3, r2, [r1]
 800400c:	61bb      	str	r3, [r7, #24]
   return(result);
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1e5      	bne.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e00f      	b.n	8004050 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4013      	ands	r3, r2
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	429a      	cmp	r2, r3
 800403e:	bf0c      	ite	eq
 8004040:	2301      	moveq	r3, #1
 8004042:	2300      	movne	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	461a      	mov	r2, r3
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	429a      	cmp	r2, r3
 800404c:	d09f      	beq.n	8003f8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3740      	adds	r7, #64	; 0x40
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	4613      	mov	r3, r2
 8004064:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	88fa      	ldrh	r2, [r7, #6]
 8004070:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	88fa      	ldrh	r2, [r7, #6]
 8004076:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2222      	movs	r2, #34	; 0x22
 8004082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d007      	beq.n	80040a6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040a4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695a      	ldr	r2, [r3, #20]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f042 0201 	orr.w	r2, r2, #1
 80040b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 0220 	orr.w	r2, r2, #32
 80040c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b095      	sub	sp, #84	; 0x54
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	330c      	adds	r3, #12
 80040e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e6:	e853 3f00 	ldrex	r3, [r3]
 80040ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	330c      	adds	r3, #12
 80040fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040fc:	643a      	str	r2, [r7, #64]	; 0x40
 80040fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004102:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e5      	bne.n	80040dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3314      	adds	r3, #20
 8004116:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	e853 3f00 	ldrex	r3, [r3]
 800411e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f023 0301 	bic.w	r3, r3, #1
 8004126:	64bb      	str	r3, [r7, #72]	; 0x48
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3314      	adds	r3, #20
 800412e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004130:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004132:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e5      	bne.n	8004110 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004148:	2b01      	cmp	r3, #1
 800414a:	d119      	bne.n	8004180 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	330c      	adds	r3, #12
 8004152:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	e853 3f00 	ldrex	r3, [r3]
 800415a:	60bb      	str	r3, [r7, #8]
   return(result);
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f023 0310 	bic.w	r3, r3, #16
 8004162:	647b      	str	r3, [r7, #68]	; 0x44
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	330c      	adds	r3, #12
 800416a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800416c:	61ba      	str	r2, [r7, #24]
 800416e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004170:	6979      	ldr	r1, [r7, #20]
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	e841 2300 	strex	r3, r2, [r1]
 8004178:	613b      	str	r3, [r7, #16]
   return(result);
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1e5      	bne.n	800414c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800418e:	bf00      	nop
 8004190:	3754      	adds	r7, #84	; 0x54
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f7ff fecb 	bl	8003f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041ba:	bf00      	nop
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b085      	sub	sp, #20
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b21      	cmp	r3, #33	; 0x21
 80041d4:	d13e      	bne.n	8004254 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041de:	d114      	bne.n	800420a <UART_Transmit_IT+0x48>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d110      	bne.n	800420a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	461a      	mov	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	1c9a      	adds	r2, r3, #2
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	621a      	str	r2, [r3, #32]
 8004208:	e008      	b.n	800421c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	1c59      	adds	r1, r3, #1
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6211      	str	r1, [r2, #32]
 8004214:	781a      	ldrb	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29b      	uxth	r3, r3
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	4619      	mov	r1, r3
 800422a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10f      	bne.n	8004250 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800423e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800424e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004250:	2300      	movs	r3, #0
 8004252:	e000      	b.n	8004256 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004254:	2302      	movs	r3, #2
  }
}
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004278:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff fe5a 	bl	8003f3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b08c      	sub	sp, #48	; 0x30
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b22      	cmp	r3, #34	; 0x22
 80042a4:	f040 80ab 	bne.w	80043fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b0:	d117      	bne.n	80042e2 <UART_Receive_IT+0x50>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d113      	bne.n	80042e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042da:	1c9a      	adds	r2, r3, #2
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	629a      	str	r2, [r3, #40]	; 0x28
 80042e0:	e026      	b.n	8004330 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80042e8:	2300      	movs	r3, #0
 80042ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f4:	d007      	beq.n	8004306 <UART_Receive_IT+0x74>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10a      	bne.n	8004314 <UART_Receive_IT+0x82>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	b2da      	uxtb	r2, r3
 800430e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004310:	701a      	strb	r2, [r3, #0]
 8004312:	e008      	b.n	8004326 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004320:	b2da      	uxtb	r2, r3
 8004322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004324:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432a:	1c5a      	adds	r2, r3, #1
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004334:	b29b      	uxth	r3, r3
 8004336:	3b01      	subs	r3, #1
 8004338:	b29b      	uxth	r3, r3
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	4619      	mov	r1, r3
 800433e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004340:	2b00      	cmp	r3, #0
 8004342:	d15a      	bne.n	80043fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0220 	bic.w	r2, r2, #32
 8004352:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004362:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695a      	ldr	r2, [r3, #20]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0201 	bic.w	r2, r2, #1
 8004372:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	2b01      	cmp	r3, #1
 8004382:	d135      	bne.n	80043f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	330c      	adds	r3, #12
 8004390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	613b      	str	r3, [r7, #16]
   return(result);
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f023 0310 	bic.w	r3, r3, #16
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	330c      	adds	r3, #12
 80043a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043aa:	623a      	str	r2, [r7, #32]
 80043ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	69f9      	ldr	r1, [r7, #28]
 80043b0:	6a3a      	ldr	r2, [r7, #32]
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e5      	bne.n	800438a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0310 	and.w	r3, r3, #16
 80043c8:	2b10      	cmp	r3, #16
 80043ca:	d10a      	bne.n	80043e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043e6:	4619      	mov	r1, r3
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff fdbb 	bl	8003f64 <HAL_UARTEx_RxEventCallback>
 80043ee:	e002      	b.n	80043f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7fc fad7 	bl	80009a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	e002      	b.n	8004400 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	e000      	b.n	8004400 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80043fe:	2302      	movs	r3, #2
  }
}
 8004400:	4618      	mov	r0, r3
 8004402:	3730      	adds	r7, #48	; 0x30
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800440c:	b0c0      	sub	sp, #256	; 0x100
 800440e:	af00      	add	r7, sp, #0
 8004410:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004424:	68d9      	ldr	r1, [r3, #12]
 8004426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	ea40 0301 	orr.w	r3, r0, r1
 8004430:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	431a      	orrs	r2, r3
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	431a      	orrs	r2, r3
 8004448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004460:	f021 010c 	bic.w	r1, r1, #12
 8004464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800446e:	430b      	orrs	r3, r1
 8004470:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800447e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004482:	6999      	ldr	r1, [r3, #24]
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	ea40 0301 	orr.w	r3, r0, r1
 800448e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	4b8f      	ldr	r3, [pc, #572]	; (80046d4 <UART_SetConfig+0x2cc>)
 8004498:	429a      	cmp	r2, r3
 800449a:	d005      	beq.n	80044a8 <UART_SetConfig+0xa0>
 800449c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	4b8d      	ldr	r3, [pc, #564]	; (80046d8 <UART_SetConfig+0x2d0>)
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d104      	bne.n	80044b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044a8:	f7fe f9d0 	bl	800284c <HAL_RCC_GetPCLK2Freq>
 80044ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80044b0:	e003      	b.n	80044ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044b2:	f7fe f9b7 	bl	8002824 <HAL_RCC_GetPCLK1Freq>
 80044b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044c4:	f040 810c 	bne.w	80046e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044cc:	2200      	movs	r2, #0
 80044ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044da:	4622      	mov	r2, r4
 80044dc:	462b      	mov	r3, r5
 80044de:	1891      	adds	r1, r2, r2
 80044e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80044e2:	415b      	adcs	r3, r3
 80044e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044ea:	4621      	mov	r1, r4
 80044ec:	eb12 0801 	adds.w	r8, r2, r1
 80044f0:	4629      	mov	r1, r5
 80044f2:	eb43 0901 	adc.w	r9, r3, r1
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004502:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004506:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800450a:	4690      	mov	r8, r2
 800450c:	4699      	mov	r9, r3
 800450e:	4623      	mov	r3, r4
 8004510:	eb18 0303 	adds.w	r3, r8, r3
 8004514:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004518:	462b      	mov	r3, r5
 800451a:	eb49 0303 	adc.w	r3, r9, r3
 800451e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800452e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004532:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004536:	460b      	mov	r3, r1
 8004538:	18db      	adds	r3, r3, r3
 800453a:	653b      	str	r3, [r7, #80]	; 0x50
 800453c:	4613      	mov	r3, r2
 800453e:	eb42 0303 	adc.w	r3, r2, r3
 8004542:	657b      	str	r3, [r7, #84]	; 0x54
 8004544:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004548:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800454c:	f7fb fe3c 	bl	80001c8 <__aeabi_uldivmod>
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	4b61      	ldr	r3, [pc, #388]	; (80046dc <UART_SetConfig+0x2d4>)
 8004556:	fba3 2302 	umull	r2, r3, r3, r2
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	011c      	lsls	r4, r3, #4
 800455e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004562:	2200      	movs	r2, #0
 8004564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004568:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800456c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004570:	4642      	mov	r2, r8
 8004572:	464b      	mov	r3, r9
 8004574:	1891      	adds	r1, r2, r2
 8004576:	64b9      	str	r1, [r7, #72]	; 0x48
 8004578:	415b      	adcs	r3, r3
 800457a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800457c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004580:	4641      	mov	r1, r8
 8004582:	eb12 0a01 	adds.w	sl, r2, r1
 8004586:	4649      	mov	r1, r9
 8004588:	eb43 0b01 	adc.w	fp, r3, r1
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	f04f 0300 	mov.w	r3, #0
 8004594:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004598:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800459c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045a0:	4692      	mov	sl, r2
 80045a2:	469b      	mov	fp, r3
 80045a4:	4643      	mov	r3, r8
 80045a6:	eb1a 0303 	adds.w	r3, sl, r3
 80045aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045ae:	464b      	mov	r3, r9
 80045b0:	eb4b 0303 	adc.w	r3, fp, r3
 80045b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045cc:	460b      	mov	r3, r1
 80045ce:	18db      	adds	r3, r3, r3
 80045d0:	643b      	str	r3, [r7, #64]	; 0x40
 80045d2:	4613      	mov	r3, r2
 80045d4:	eb42 0303 	adc.w	r3, r2, r3
 80045d8:	647b      	str	r3, [r7, #68]	; 0x44
 80045da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045e2:	f7fb fdf1 	bl	80001c8 <__aeabi_uldivmod>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4611      	mov	r1, r2
 80045ec:	4b3b      	ldr	r3, [pc, #236]	; (80046dc <UART_SetConfig+0x2d4>)
 80045ee:	fba3 2301 	umull	r2, r3, r3, r1
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	2264      	movs	r2, #100	; 0x64
 80045f6:	fb02 f303 	mul.w	r3, r2, r3
 80045fa:	1acb      	subs	r3, r1, r3
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004602:	4b36      	ldr	r3, [pc, #216]	; (80046dc <UART_SetConfig+0x2d4>)
 8004604:	fba3 2302 	umull	r2, r3, r3, r2
 8004608:	095b      	lsrs	r3, r3, #5
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004610:	441c      	add	r4, r3
 8004612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004616:	2200      	movs	r2, #0
 8004618:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800461c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004620:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004624:	4642      	mov	r2, r8
 8004626:	464b      	mov	r3, r9
 8004628:	1891      	adds	r1, r2, r2
 800462a:	63b9      	str	r1, [r7, #56]	; 0x38
 800462c:	415b      	adcs	r3, r3
 800462e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004630:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004634:	4641      	mov	r1, r8
 8004636:	1851      	adds	r1, r2, r1
 8004638:	6339      	str	r1, [r7, #48]	; 0x30
 800463a:	4649      	mov	r1, r9
 800463c:	414b      	adcs	r3, r1
 800463e:	637b      	str	r3, [r7, #52]	; 0x34
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	f04f 0300 	mov.w	r3, #0
 8004648:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800464c:	4659      	mov	r1, fp
 800464e:	00cb      	lsls	r3, r1, #3
 8004650:	4651      	mov	r1, sl
 8004652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004656:	4651      	mov	r1, sl
 8004658:	00ca      	lsls	r2, r1, #3
 800465a:	4610      	mov	r0, r2
 800465c:	4619      	mov	r1, r3
 800465e:	4603      	mov	r3, r0
 8004660:	4642      	mov	r2, r8
 8004662:	189b      	adds	r3, r3, r2
 8004664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004668:	464b      	mov	r3, r9
 800466a:	460a      	mov	r2, r1
 800466c:	eb42 0303 	adc.w	r3, r2, r3
 8004670:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004680:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004684:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004688:	460b      	mov	r3, r1
 800468a:	18db      	adds	r3, r3, r3
 800468c:	62bb      	str	r3, [r7, #40]	; 0x28
 800468e:	4613      	mov	r3, r2
 8004690:	eb42 0303 	adc.w	r3, r2, r3
 8004694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004696:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800469a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800469e:	f7fb fd93 	bl	80001c8 <__aeabi_uldivmod>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	4b0d      	ldr	r3, [pc, #52]	; (80046dc <UART_SetConfig+0x2d4>)
 80046a8:	fba3 1302 	umull	r1, r3, r3, r2
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	2164      	movs	r1, #100	; 0x64
 80046b0:	fb01 f303 	mul.w	r3, r1, r3
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	3332      	adds	r3, #50	; 0x32
 80046ba:	4a08      	ldr	r2, [pc, #32]	; (80046dc <UART_SetConfig+0x2d4>)
 80046bc:	fba2 2303 	umull	r2, r3, r2, r3
 80046c0:	095b      	lsrs	r3, r3, #5
 80046c2:	f003 0207 	and.w	r2, r3, #7
 80046c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4422      	add	r2, r4
 80046ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046d0:	e106      	b.n	80048e0 <UART_SetConfig+0x4d8>
 80046d2:	bf00      	nop
 80046d4:	40011000 	.word	0x40011000
 80046d8:	40011400 	.word	0x40011400
 80046dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046e4:	2200      	movs	r2, #0
 80046e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046f2:	4642      	mov	r2, r8
 80046f4:	464b      	mov	r3, r9
 80046f6:	1891      	adds	r1, r2, r2
 80046f8:	6239      	str	r1, [r7, #32]
 80046fa:	415b      	adcs	r3, r3
 80046fc:	627b      	str	r3, [r7, #36]	; 0x24
 80046fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004702:	4641      	mov	r1, r8
 8004704:	1854      	adds	r4, r2, r1
 8004706:	4649      	mov	r1, r9
 8004708:	eb43 0501 	adc.w	r5, r3, r1
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	f04f 0300 	mov.w	r3, #0
 8004714:	00eb      	lsls	r3, r5, #3
 8004716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800471a:	00e2      	lsls	r2, r4, #3
 800471c:	4614      	mov	r4, r2
 800471e:	461d      	mov	r5, r3
 8004720:	4643      	mov	r3, r8
 8004722:	18e3      	adds	r3, r4, r3
 8004724:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004728:	464b      	mov	r3, r9
 800472a:	eb45 0303 	adc.w	r3, r5, r3
 800472e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800473e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800474e:	4629      	mov	r1, r5
 8004750:	008b      	lsls	r3, r1, #2
 8004752:	4621      	mov	r1, r4
 8004754:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004758:	4621      	mov	r1, r4
 800475a:	008a      	lsls	r2, r1, #2
 800475c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004760:	f7fb fd32 	bl	80001c8 <__aeabi_uldivmod>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4b60      	ldr	r3, [pc, #384]	; (80048ec <UART_SetConfig+0x4e4>)
 800476a:	fba3 2302 	umull	r2, r3, r3, r2
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	011c      	lsls	r4, r3, #4
 8004772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004776:	2200      	movs	r2, #0
 8004778:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800477c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004780:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004784:	4642      	mov	r2, r8
 8004786:	464b      	mov	r3, r9
 8004788:	1891      	adds	r1, r2, r2
 800478a:	61b9      	str	r1, [r7, #24]
 800478c:	415b      	adcs	r3, r3
 800478e:	61fb      	str	r3, [r7, #28]
 8004790:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004794:	4641      	mov	r1, r8
 8004796:	1851      	adds	r1, r2, r1
 8004798:	6139      	str	r1, [r7, #16]
 800479a:	4649      	mov	r1, r9
 800479c:	414b      	adcs	r3, r1
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	f04f 0200 	mov.w	r2, #0
 80047a4:	f04f 0300 	mov.w	r3, #0
 80047a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047ac:	4659      	mov	r1, fp
 80047ae:	00cb      	lsls	r3, r1, #3
 80047b0:	4651      	mov	r1, sl
 80047b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047b6:	4651      	mov	r1, sl
 80047b8:	00ca      	lsls	r2, r1, #3
 80047ba:	4610      	mov	r0, r2
 80047bc:	4619      	mov	r1, r3
 80047be:	4603      	mov	r3, r0
 80047c0:	4642      	mov	r2, r8
 80047c2:	189b      	adds	r3, r3, r2
 80047c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047c8:	464b      	mov	r3, r9
 80047ca:	460a      	mov	r2, r1
 80047cc:	eb42 0303 	adc.w	r3, r2, r3
 80047d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80047de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047ec:	4649      	mov	r1, r9
 80047ee:	008b      	lsls	r3, r1, #2
 80047f0:	4641      	mov	r1, r8
 80047f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047f6:	4641      	mov	r1, r8
 80047f8:	008a      	lsls	r2, r1, #2
 80047fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047fe:	f7fb fce3 	bl	80001c8 <__aeabi_uldivmod>
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	4611      	mov	r1, r2
 8004808:	4b38      	ldr	r3, [pc, #224]	; (80048ec <UART_SetConfig+0x4e4>)
 800480a:	fba3 2301 	umull	r2, r3, r3, r1
 800480e:	095b      	lsrs	r3, r3, #5
 8004810:	2264      	movs	r2, #100	; 0x64
 8004812:	fb02 f303 	mul.w	r3, r2, r3
 8004816:	1acb      	subs	r3, r1, r3
 8004818:	011b      	lsls	r3, r3, #4
 800481a:	3332      	adds	r3, #50	; 0x32
 800481c:	4a33      	ldr	r2, [pc, #204]	; (80048ec <UART_SetConfig+0x4e4>)
 800481e:	fba2 2303 	umull	r2, r3, r2, r3
 8004822:	095b      	lsrs	r3, r3, #5
 8004824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004828:	441c      	add	r4, r3
 800482a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800482e:	2200      	movs	r2, #0
 8004830:	673b      	str	r3, [r7, #112]	; 0x70
 8004832:	677a      	str	r2, [r7, #116]	; 0x74
 8004834:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004838:	4642      	mov	r2, r8
 800483a:	464b      	mov	r3, r9
 800483c:	1891      	adds	r1, r2, r2
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	415b      	adcs	r3, r3
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004848:	4641      	mov	r1, r8
 800484a:	1851      	adds	r1, r2, r1
 800484c:	6039      	str	r1, [r7, #0]
 800484e:	4649      	mov	r1, r9
 8004850:	414b      	adcs	r3, r1
 8004852:	607b      	str	r3, [r7, #4]
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004860:	4659      	mov	r1, fp
 8004862:	00cb      	lsls	r3, r1, #3
 8004864:	4651      	mov	r1, sl
 8004866:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800486a:	4651      	mov	r1, sl
 800486c:	00ca      	lsls	r2, r1, #3
 800486e:	4610      	mov	r0, r2
 8004870:	4619      	mov	r1, r3
 8004872:	4603      	mov	r3, r0
 8004874:	4642      	mov	r2, r8
 8004876:	189b      	adds	r3, r3, r2
 8004878:	66bb      	str	r3, [r7, #104]	; 0x68
 800487a:	464b      	mov	r3, r9
 800487c:	460a      	mov	r2, r1
 800487e:	eb42 0303 	adc.w	r3, r2, r3
 8004882:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	663b      	str	r3, [r7, #96]	; 0x60
 800488e:	667a      	str	r2, [r7, #100]	; 0x64
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	f04f 0300 	mov.w	r3, #0
 8004898:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800489c:	4649      	mov	r1, r9
 800489e:	008b      	lsls	r3, r1, #2
 80048a0:	4641      	mov	r1, r8
 80048a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048a6:	4641      	mov	r1, r8
 80048a8:	008a      	lsls	r2, r1, #2
 80048aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80048ae:	f7fb fc8b 	bl	80001c8 <__aeabi_uldivmod>
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	4b0d      	ldr	r3, [pc, #52]	; (80048ec <UART_SetConfig+0x4e4>)
 80048b8:	fba3 1302 	umull	r1, r3, r3, r2
 80048bc:	095b      	lsrs	r3, r3, #5
 80048be:	2164      	movs	r1, #100	; 0x64
 80048c0:	fb01 f303 	mul.w	r3, r1, r3
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	3332      	adds	r3, #50	; 0x32
 80048ca:	4a08      	ldr	r2, [pc, #32]	; (80048ec <UART_SetConfig+0x4e4>)
 80048cc:	fba2 2303 	umull	r2, r3, r2, r3
 80048d0:	095b      	lsrs	r3, r3, #5
 80048d2:	f003 020f 	and.w	r2, r3, #15
 80048d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4422      	add	r2, r4
 80048de:	609a      	str	r2, [r3, #8]
}
 80048e0:	bf00      	nop
 80048e2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048e6:	46bd      	mov	sp, r7
 80048e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ec:	51eb851f 	.word	0x51eb851f

080048f0 <memset>:
 80048f0:	4402      	add	r2, r0
 80048f2:	4603      	mov	r3, r0
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d100      	bne.n	80048fa <memset+0xa>
 80048f8:	4770      	bx	lr
 80048fa:	f803 1b01 	strb.w	r1, [r3], #1
 80048fe:	e7f9      	b.n	80048f4 <memset+0x4>

08004900 <__libc_init_array>:
 8004900:	b570      	push	{r4, r5, r6, lr}
 8004902:	4d0d      	ldr	r5, [pc, #52]	; (8004938 <__libc_init_array+0x38>)
 8004904:	4c0d      	ldr	r4, [pc, #52]	; (800493c <__libc_init_array+0x3c>)
 8004906:	1b64      	subs	r4, r4, r5
 8004908:	10a4      	asrs	r4, r4, #2
 800490a:	2600      	movs	r6, #0
 800490c:	42a6      	cmp	r6, r4
 800490e:	d109      	bne.n	8004924 <__libc_init_array+0x24>
 8004910:	4d0b      	ldr	r5, [pc, #44]	; (8004940 <__libc_init_array+0x40>)
 8004912:	4c0c      	ldr	r4, [pc, #48]	; (8004944 <__libc_init_array+0x44>)
 8004914:	f000 f818 	bl	8004948 <_init>
 8004918:	1b64      	subs	r4, r4, r5
 800491a:	10a4      	asrs	r4, r4, #2
 800491c:	2600      	movs	r6, #0
 800491e:	42a6      	cmp	r6, r4
 8004920:	d105      	bne.n	800492e <__libc_init_array+0x2e>
 8004922:	bd70      	pop	{r4, r5, r6, pc}
 8004924:	f855 3b04 	ldr.w	r3, [r5], #4
 8004928:	4798      	blx	r3
 800492a:	3601      	adds	r6, #1
 800492c:	e7ee      	b.n	800490c <__libc_init_array+0xc>
 800492e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004932:	4798      	blx	r3
 8004934:	3601      	adds	r6, #1
 8004936:	e7f2      	b.n	800491e <__libc_init_array+0x1e>
 8004938:	08004988 	.word	0x08004988
 800493c:	08004988 	.word	0x08004988
 8004940:	08004988 	.word	0x08004988
 8004944:	0800498c 	.word	0x0800498c

08004948 <_init>:
 8004948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494a:	bf00      	nop
 800494c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494e:	bc08      	pop	{r3}
 8004950:	469e      	mov	lr, r3
 8004952:	4770      	bx	lr

08004954 <_fini>:
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004956:	bf00      	nop
 8004958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800495a:	bc08      	pop	{r3}
 800495c:	469e      	mov	lr, r3
 800495e:	4770      	bx	lr
